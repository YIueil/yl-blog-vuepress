import{_ as n,o as s,c as a,d as t}from"./app-4023f1b2.js";const p={},e=t(`<h1 id="pinia-study" tabindex="-1"><a class="header-anchor" href="#pinia-study" aria-hidden="true">#</a> pinia-study</h1><p>Pinia学习项目</p><h2 id="_1-创建和使用store" tabindex="-1"><a class="header-anchor" href="#_1-创建和使用store" aria-hidden="true">#</a> 1 创建和使用Store</h2><h3 id="_1-1-选项式" tabindex="-1"><a class="header-anchor" href="#_1-1-选项式" aria-hidden="true">#</a> 1.1 选项式</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">doubleCount</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-声明式" tabindex="-1"><a class="header-anchor" href="#_1-2-声明式" aria-hidden="true">#</a> 1.2 声明式</h3><ul><li>ref() 就是 state 属性</li><li>computed() 就是 getters</li><li>function() 就是 actions</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> doubleCount <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> count<span class="token punctuation">.</span>value<span class="token operator">++</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    count<span class="token punctuation">,</span>    doubleCount<span class="token punctuation">,</span>    increment  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-使用store" tabindex="-1"><a class="header-anchor" href="#_1-3-使用store" aria-hidden="true">#</a> 1.3 使用Store</h3><h4 id="错误示例" tabindex="-1"><a class="header-anchor" href="#错误示例" aria-hidden="true">#</a> 错误示例</h4><blockquote><p>直接解构获取 state 和 getters 是错误的, 会失去<code>响应式</code>特性</p></blockquote><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  
  
<span class="token keyword">import</span> <span class="token punctuation">{</span> useCounterStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./stores/useCounterStore&#39;</span>  
  
<span class="token keyword">const</span> counterStore <span class="token operator">=</span> <span class="token function">useCounterStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token keyword">const</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> doubleCount<span class="token punctuation">,</span> increment <span class="token punctuation">}</span> <span class="token operator">=</span> counterStore  
  
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  
  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ doubleCount }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 通过input修改count, 将不会按照预期修改成功 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>无明增长<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>  
  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="正确姿势" tabindex="-1"><a class="header-anchor" href="#正确姿势" aria-hidden="true">#</a> 正确姿势</h4><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  
  
<span class="token keyword">import</span> <span class="token punctuation">{</span> useCounterStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./stores/useCounterStore&#39;</span>  
<span class="token keyword">import</span> <span class="token punctuation">{</span> storeToRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>  
  
<span class="token keyword">const</span> counterStore <span class="token operator">=</span> <span class="token function">useCounterStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token keyword">const</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> doubleCount <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>counterStore<span class="token punctuation">)</span>  
<span class="token comment">// action 可以直接解构, 没有问题  </span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> increment <span class="token punctuation">}</span> <span class="token operator">=</span> counterStore  
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  
  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ doubleCount }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>无明增长<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>  
  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-定义和使用state" tabindex="-1"><a class="header-anchor" href="#_2-定义和使用state" aria-hidden="true">#</a> 2 定义和使用State</h2><h3 id="_2-1-定义state" tabindex="-1"><a class="header-anchor" href="#_2-1-定义state" aria-hidden="true">#</a> 2.1 定义State</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 定义类型帮助推断  </span>
<span class="token keyword">interface</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{</span>  
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span>  
  
<span class="token keyword">export</span> <span class="token keyword">const</span> useStateStore1 <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;state1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  
  <span class="token comment">// 注意: 这里使用箭头函数保证完整推断  </span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token comment">// 所有这些属性都将自动推断出它们的类型  </span>
      count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">&#39;intro&#39;</span><span class="token punctuation">,</span>      isAdmin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      items<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      hasChanged<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      userList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> UserInfo<span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  
  
<span class="token comment">// 定义state的接口定义  </span>
<span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>  
  count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  isAdmin<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>  items<span class="token operator">:</span> object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  hasChanged<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>  userList<span class="token operator">:</span> UserInfo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>  
  
<span class="token keyword">export</span> <span class="token keyword">const</span> useStateStore2 <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;state2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  
  <span class="token comment">// 注意: 这里使用箭头函数保证完整推断  </span>
  state<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> State <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token comment">// 所有这些属性都将自动推断出它们的类型  </span>
      count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">&#39;intro&#39;</span><span class="token punctuation">,</span>      isAdmin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      items<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      hasChanged<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      userList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  
  
<span class="token comment">// 声明式写法  </span>
<span class="token keyword">export</span> <span class="token keyword">const</span> useStateStore3 <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;state3&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;intro&#39;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> isAdmin <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reactive</span><span class="token generic class-name"><span class="token operator">&lt;</span>object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> hasChanged <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> userList <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reactive</span><span class="token generic class-name"><span class="token operator">&lt;</span>UserInfo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    count<span class="token punctuation">,</span>    name<span class="token punctuation">,</span>    isAdmin<span class="token punctuation">,</span>    items<span class="token punctuation">,</span>    hasChanged<span class="token punctuation">,</span>    userList  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-使用state" tabindex="-1"><a class="header-anchor" href="#_2-2-使用state" aria-hidden="true">#</a> 2.2 使用State</h3><p>在声明式的 vue 组件中使用</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  
<span class="token keyword">import</span> <span class="token punctuation">{</span> useStateStore1<span class="token punctuation">,</span> useStateStore2<span class="token punctuation">,</span> useStateStore3 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/stores/useStateStore&#39;</span>  
<span class="token keyword">import</span> <span class="token punctuation">{</span> storeToRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>  
  
<span class="token keyword">const</span> stateStore1 <span class="token operator">=</span> <span class="token function">useStateStore1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token keyword">const</span> stateStore2 <span class="token operator">=</span> <span class="token function">useStateStore2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token keyword">const</span> stateStore3 <span class="token operator">=</span> <span class="token function">useStateStore3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token keyword">const</span> <span class="token punctuation">{</span>  
  <span class="token literal-property property">count</span><span class="token operator">:</span> count1<span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> name1<span class="token punctuation">,</span>  <span class="token literal-property property">isAdmin</span><span class="token operator">:</span> isAdmin1<span class="token punctuation">,</span>  <span class="token literal-property property">items</span><span class="token operator">:</span> items1<span class="token punctuation">,</span>  <span class="token literal-property property">hasChanged</span><span class="token operator">:</span> hasChanged1<span class="token punctuation">,</span>  <span class="token literal-property property">userList</span><span class="token operator">:</span> userList1<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>stateStore1<span class="token punctuation">)</span>  
<span class="token keyword">const</span> <span class="token punctuation">{</span>  
  <span class="token literal-property property">count</span><span class="token operator">:</span> count2<span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> name2<span class="token punctuation">,</span>  <span class="token literal-property property">isAdmin</span><span class="token operator">:</span> isAdmin2<span class="token punctuation">,</span>  <span class="token literal-property property">items</span><span class="token operator">:</span> items2<span class="token punctuation">,</span>  <span class="token literal-property property">hasChanged</span><span class="token operator">:</span> hasChanged2<span class="token punctuation">,</span>  <span class="token literal-property property">userList</span><span class="token operator">:</span> userList2<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>stateStore2<span class="token punctuation">)</span>  
<span class="token keyword">const</span> <span class="token punctuation">{</span>  
  <span class="token literal-property property">count</span><span class="token operator">:</span> count3<span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> name3<span class="token punctuation">,</span>  <span class="token literal-property property">isAdmin</span><span class="token operator">:</span> isAdmin3<span class="token punctuation">,</span>  <span class="token literal-property property">items</span><span class="token operator">:</span> items3<span class="token punctuation">,</span>  <span class="token literal-property property">hasChanged</span><span class="token operator">:</span> hasChanged3<span class="token punctuation">,</span>  <span class="token literal-property property">userList</span><span class="token operator">:</span> userList3<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>stateStore3<span class="token punctuation">)</span>  
  
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  
  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>    store1: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    {{count1}}    {{name1}}    {{isAdmin1}}    {{items1}}    {{hasChanged1}}    {{userList1}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>    store2: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    {{count2}}    {{name2}}    {{isAdmin2}}    {{items2}}    {{hasChanged2}}    {{userList2}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>    store3: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    {{count3}}    {{name3}}    {{isAdmin3}}    {{items3}}    {{hasChanged3}}    {{userList3}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在选项式中使用state, mapState映射为只读计算属性, mapWritableState映射为可写的计算属性。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  
  <span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span> mapWritableState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> useStateStore1<span class="token punctuation">,</span> useStateStore2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/stores/useStateStore&#39;</span>  
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;UseStateOptions&#39;</span><span class="token punctuation">,</span>    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token comment">// 映射为只读的计算属性  </span>
      <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span>useStateStore1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;isAdmin&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span>useStateStore1<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token function-variable function">items</span><span class="token operator">:</span> <span class="token parameter">store</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>items<span class="token punctuation">,</span>        <span class="token function-variable function">hasChanged</span><span class="token operator">:</span> <span class="token parameter">store</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>hasChanged      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// 映射为可写的计算属性 但是这里不支持函数的写法store =&gt; store.count  </span>
      <span class="token operator">...</span><span class="token function">mapWritableState</span><span class="token punctuation">(</span>useStateStore2<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token literal-property property">count2</span><span class="token operator">:</span> <span class="token string">&#39;count&#39;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  
  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>    store1:    {{ count }}    {{ name }}    {{ isAdmin }}    {{ items }}    {{ hasChanged }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>    store2:    {{ count2 }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- count1增加无效, count2可以增加 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>count1增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count2++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>count2增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用getter" tabindex="-1"><a class="header-anchor" href="#_3-使用getter" aria-hidden="true">#</a> 3 使用Getter</h2><h2 id="_4-使用action" tabindex="-1"><a class="header-anchor" href="#_4-使用action" aria-hidden="true">#</a> 4 使用Action</h2>`,24),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","Piniaxuexixiangmu.html.vue"]]);export{k as default};
