import{_ as s,o as a,c as n,d as e}from"./app-4023f1b2.js";const i={},o=e(`<h1 id="ssh密钥对" tabindex="-1"><a class="header-anchor" href="#ssh密钥对" aria-hidden="true">#</a> SSH密钥对</h1><blockquote><p>SSH是广泛使用的一种通信认证协议，相比较于常规的账号密码登录的方式，通过密钥对进行认证的方式更加安全。</p></blockquote><h2 id="_1-认证流程" tabindex="-1"><a class="header-anchor" href="#_1-认证流程" aria-hidden="true">#</a> 1 认证流程</h2><ol><li>客户端生成密钥。</li><li>服务器存储了信任的公钥，并且服务器自身也有一对密钥。</li><li>客户端使用自己的私钥进行认证。</li><li>服务器验证私钥和公钥匹配通过，则将自身的公钥给到客户端。</li><li>客户端查询自己的known_hosts，清单中如果有这个服务器主机，则直接连接。否则触发警告。 <ul><li>第一次连接的时候触发警告主要是为了防止中间人攻击。避免公钥泄露的时候，第三方用公钥来实现攻击。</li></ul></li></ol><h2 id="_2-密钥的生成" tabindex="-1"><a class="header-anchor" href="#_2-密钥的生成" aria-hidden="true">#</a> 2 密钥的生成</h2><blockquote><p>现阶段推荐的算法是<code>ed25519</code>，如果是为了兼容性，可以选择生成常规的<code>RSA</code>算法。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用ed25519算法生成密钥对</span>
ssh-keygen <span class="token parameter variable">-t</span> ed25519 <span class="token parameter variable">-C</span> <span class="token string">&quot;这个是一个测试的ed25519密钥对&quot;</span>

<span class="token comment"># 使用RSA算法生成密钥对</span>
ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">&quot;这个是一个测试的rsa密钥，长度为4096&quot;</span>

<span class="token comment"># 或者使用交互的方式生成密钥对</span>
D:<span class="token punctuation">\\</span>YIueil<span class="token punctuation">\\</span>WorkSpace<span class="token punctuation">\\</span>Code<span class="token operator">&gt;</span>ssh-keygen
 
Generating public/private ed25519 key pair.
Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>Administrator/.ssh/id_ed25519<span class="token punctuation">)</span>:
C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>Administrator/.ssh/id_ed25519 already exists.
Overwrite <span class="token punctuation">(</span>y/n<span class="token punctuation">)</span>? y
Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:
Enter same passphrase again:
Your identification has been saved <span class="token keyword">in</span> C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>Administrator/.ssh/id_ed25519
Your public key has been saved <span class="token keyword">in</span> C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>Administrator/.ssh/id_ed25519.pub
The key fingerprint is:
SHA256:SbMYyi/SjSUdckif8ZAu1tUmmKNO+JORA9kx2v9sc9Q administrator@YIUEIL-B660M
The key&#39;s randomart image is:
+--<span class="token punctuation">[</span>ED25519 <span class="token number">256</span><span class="token punctuation">]</span>--+
<span class="token operator">|</span>   o+.o+ <span class="token builtin class-name">.</span>       <span class="token operator">|</span>
<span class="token operator">|</span>  o+.<span class="token operator">+=</span><span class="token operator">=</span>o o      <span class="token operator">|</span>
<span class="token operator">|</span>  .o<span class="token operator">+=</span>*o+o       <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token punctuation">..</span>O*o<span class="token operator">=</span> + <span class="token builtin class-name">.</span>     <span class="token operator">|</span>
<span class="token operator">|</span>   <span class="token operator">=</span><span class="token operator">+=</span><span class="token operator">=</span> S <span class="token builtin class-name">.</span> E    <span class="token operator">|</span>
<span class="token operator">|</span>   .<span class="token operator">=</span>* o <span class="token builtin class-name">.</span>       <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token builtin class-name">.</span> +.o <span class="token operator">=</span> <span class="token builtin class-name">.</span>      <span class="token operator">|</span>
<span class="token operator">|</span>   <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> o       <span class="token operator">|</span>
<span class="token operator">|</span>                 <span class="token operator">|</span>
+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-服务器存储信任的密钥公钥" tabindex="-1"><a class="header-anchor" href="#_3-服务器存储信任的密钥公钥" aria-hidden="true">#</a> 3 服务器存储信任的密钥公钥</h2><h3 id="方法1-客户端直接通过命令上传到服务端" tabindex="-1"><a class="header-anchor" href="#方法1-客户端直接通过命令上传到服务端" aria-hidden="true">#</a> 方法1：客户端直接通过命令上传到服务端</h3><blockquote><p>把本地的ssh公钥文件安装到远程主机对应的账户下</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># ssh-copy-id [-i [identity_file]] [user@]machine</span>
ssh-copy-id <span class="token parameter variable">-i</span> ~/.ssh/id_rsa.pub user@server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法2-进入服务端-直接修改服务端的公钥内容" tabindex="-1"><a class="header-anchor" href="#方法2-进入服务端-直接修改服务端的公钥内容" aria-hidden="true">#</a> 方法2：进入服务端，直接修改服务端的公钥内容</h3><blockquote><p>修改~/.ssh/authorized_keys文件，将公钥加入到这个文件中。每行一个以适配多个设备的公钥。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-rsa AAAAB3NzaC1yc2E<span class="token punctuation">..</span>. user1@laptop
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5<span class="token punctuation">..</span>. user1@phone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需要注意的服务器的私钥和<code>authorized_keys</code>的权限必须是600，<code>.ssh</code>目录的权限是700</p></blockquote><h2 id="_4-客户端使用密钥私钥进行认证" tabindex="-1"><a class="header-anchor" href="#_4-客户端使用密钥私钥进行认证" aria-hidden="true">#</a> 4 客户端使用密钥私钥进行认证</h2><blockquote><p>使用<code>-i</code>参数来指定对应的密钥。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;C:\\Users\\Administrator\\.ssh\\id_ed25519&quot;</span> yiueil@192.168.31.154
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,18),t=[o];function p(l,c){return a(),n("div",null,t)}const d=s(i,[["render",p],["__file","SSHmiyuedui.html.vue"]]);export{d as default};
