import{_ as e,o as d,c as a,d as t}from"./app-4023f1b2.js";const i={},c=t(`<h1 id="git基础学习" tabindex="-1"><a class="header-anchor" href="#git基础学习" aria-hidden="true">#</a> Git基础学习</h1><h2 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1 介绍</h2><p>Git是一个免费、开源的分布式版本控制系统，用于快速高效地处理项目的各种版本管理任务。</p><h2 id="_2-版本回退和前进" tabindex="-1"><a class="header-anchor" href="#_2-版本回退和前进" aria-hidden="true">#</a> 2 版本回退和前进</h2><h3 id="_2-1-回退到指定版本" tabindex="-1"><a class="header-anchor" href="#_2-1-回退到指定版本" aria-hidden="true">#</a> 2.1 回退到指定版本</h3><p><code>git reset --hard [版本编号]</code></p><h3 id="_2-2-回退到当前最新版本的上一个版本-使用-代表上一个版本" tabindex="-1"><a class="header-anchor" href="#_2-2-回退到当前最新版本的上一个版本-使用-代表上一个版本" aria-hidden="true">#</a> 2.2 回退到当前最新版本的上一个版本, 使用^代表上一个版本</h3><p><code>git reset --hard HEAD^</code></p><blockquote><p><code>--hard</code>硬回退, 恢复到当前版本已提交的状态, 并抛弃回退版本后续的版本.</p><p><code>--soft</code>软回退, 只将版本回退, 保留本地变更, 不会丢失本地修改.</p><p><code>--mixed</code>默认值, 恢复到当前版本的已提交状态, 不抛弃后续的版本内容.</p></blockquote><h3 id="_2-3-查看-git-提交日志" tabindex="-1"><a class="header-anchor" href="#_2-3-查看-git-提交日志" aria-hidden="true">#</a> 2.3 查看 git 提交日志</h3><p><code>git log --graph --pretty=oneline</code></p><blockquote><p>参数</p><p>--graph: 查看分支合并图</p><p>--pretty: 格式化, oneline 表示单行</p></blockquote><h3 id="_2-4-查看历史执行日志" tabindex="-1"><a class="header-anchor" href="#_2-4-查看历史执行日志" aria-hidden="true">#</a> 2.4 查看历史执行日志</h3><p><code>git reflog</code></p><h2 id="_3-文件目录、工作区、暂存区-stage-、本地仓库、远程仓库" tabindex="-1"><a class="header-anchor" href="#_3-文件目录、工作区、暂存区-stage-、本地仓库、远程仓库" aria-hidden="true">#</a> 3 文件目录、工作区、暂存区(stage)、本地仓库、远程仓库</h2><blockquote><p>工作区 -&gt; <code>git add</code> -&gt; 暂存区 -&gt; <code>git commit</code> -&gt; 本地仓库 -&gt; <code>git push</code> -&gt; 远程仓库</p><p>IDEA中为了简化了git操作, 提交会自动进行<code>git add</code>操作, 使用命令需要每次修改前<code>git add</code>相关修改的文件.</p></blockquote><h3 id="_3-1-工作区" tabindex="-1"><a class="header-anchor" href="#_3-1-工作区" aria-hidden="true">#</a> 3.1 工作区</h3><p>在文件目录中, 未add的文件保存在工作区</p><h3 id="_3-2-暂存区" tabindex="-1"><a class="header-anchor" href="#_3-2-暂存区" aria-hidden="true">#</a> 3.2 暂存区</h3><p>对工作做区中的文件执行<code>git add</code>后存放在暂存区, 由git追溯变化</p><h3 id="_3-3-本地仓库" tabindex="-1"><a class="header-anchor" href="#_3-3-本地仓库" aria-hidden="true">#</a> 3.3 本地仓库</h3><p>修改完成进行<code>git commit</code>的文件存放在本地仓库</p><h3 id="_3-4-远程仓库" tabindex="-1"><a class="header-anchor" href="#_3-4-远程仓库" aria-hidden="true">#</a> 3.4 远程仓库</h3><p>本地内容<code>git push</code>提交到远程仓库管理</p><h2 id="_4-丢弃修改" tabindex="-1"><a class="header-anchor" href="#_4-丢弃修改" aria-hidden="true">#</a> 4 丢弃修改</h2><blockquote><p>很多时候某个文件代码写了半天, 提交前发现代码写的太 low 了, 此时可以丢弃修改内容.</p></blockquote><p>丢弃工作区(git add之前)更改的命令如下: <code>git restore &lt;file&gt;</code></p><p>撤销暂存区(git add之后git commit之前)提交的命令如下: <code>git restore --staged &lt;file&gt;</code></p><p>不关心文件在哪个区, 丢弃修改: <code>git restore --source=HEAD -- &lt;file&gt;</code></p><h2 id="_5-分支" tabindex="-1"><a class="header-anchor" href="#_5-分支" aria-hidden="true">#</a> 5 分支</h2><blockquote><p>分支系统是 git 的最强大的功能.</p></blockquote><h3 id="_5-1-分支创建、切换和删除" tabindex="-1"><a class="header-anchor" href="#_5-1-分支创建、切换和删除" aria-hidden="true">#</a> 5.1 分支创建、切换和删除</h3><h4 id="创建分支-git-branch-分支名" tabindex="-1"><a class="header-anchor" href="#创建分支-git-branch-分支名" aria-hidden="true">#</a> 创建分支: <code>git branch &lt;分支名&gt;</code></h4><h4 id="切换分支-git-switch-分支名" tabindex="-1"><a class="header-anchor" href="#切换分支-git-switch-分支名" aria-hidden="true">#</a> 切换分支: <code>git switch &lt;分支名&gt;</code></h4><blockquote><p>参数</p><p>-c <code>git switch -c &lt;分支名&gt;</code>实现切换前创建分支</p></blockquote><h4 id="将分支合并到当前分支-git-merge-分支名" tabindex="-1"><a class="header-anchor" href="#将分支合并到当前分支-git-merge-分支名" aria-hidden="true">#</a> 将分支合并到当前分支: <code>git merge &lt;分支名&gt;</code></h4><p>例子:</p><p>非快速合并&amp;补充提交信息:<code>git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101</code></p><blockquote><p>参数</p><p>-m: 指定合并信息</p><p>--no-ff: 不使用快速合并</p></blockquote><h4 id="删除分支-git-branch-d-分支名" tabindex="-1"><a class="header-anchor" href="#删除分支-git-branch-d-分支名" aria-hidden="true">#</a> 删除分支: <code>git branch -d &lt;分支名&gt;</code></h4><blockquote><p>Tips: 如果分支没有被合并, 删除会提示未合并分支, 删除将丢失分支编辑的内容. 如果确实不需要该分支内容, 使用<code>git branch -D &lt;分支名&gt;</code>删除.</p></blockquote><h3 id="_5-2-分支合并冲突" tabindex="-1"><a class="header-anchor" href="#_5-2-分支合并冲突" aria-hidden="true">#</a> 5.2 分支合并冲突</h3><p>当两个分支对同一个文件进行了编辑, git 可能无法进行自动合并.</p><p>git 会使用&gt;&gt;&gt; === &lt;&lt;&lt;来表示冲突内容, 此时就需要手动进行处理冲突.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>切换分支前编写的内容
一部分内容开发完成。
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
dev上的修改。
=======
liuhao上的修改。
liuhao上的修改2。
&gt;&gt;&gt;&gt;&gt;&gt;&gt; liuhao
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-工作暂存" tabindex="-1"><a class="header-anchor" href="#_5-3-工作暂存" aria-hidden="true">#</a> 5.3 工作暂存</h3><p>当工作进行中的代码未编写完成, 不能提交的时候, 可以使用git stash命令进行保存工作快照。</p><p><code>git stash list</code>: 查询快照.</p><p><code>git stash</code>: 保存工作快照.</p><p><code>git stash apply</code>: 恢复快照, 恢复后不删除快照.</p><p><code>git stash pop</code>: 恢复快照, 恢复后删除快照.</p><h3 id="_5-4-复制提交" tabindex="-1"><a class="header-anchor" href="#_5-4-复制提交" aria-hidden="true">#</a> 5.4 复制提交</h3><p>当我们基于<code>master</code>新建了一个<code>bugfix</code>分支, 并且在bugfix分支上完成了修复, 我们切回<code>master</code>分支合并掉bugfix, 即修复了这个bug, <code>dev</code>分支是基于<code>master</code>分支创建的, 则dev上可能也存在这个bug. 则可以使用<code>cherry-pick</code>命令来将某个提交应用于其他的分支.</p><p><code>git cherry-pick &lt;commit&gt;</code>: 将提交应用于当前分支.</p><h3 id="_5-5-远程分支" tabindex="-1"><a class="header-anchor" href="#_5-5-远程分支" aria-hidden="true">#</a> 5.5 远程分支</h3><p>之前的操作都是在本地进行的分支管理, 本地创建的分支不推送不会同步到远程.</p><h4 id="查看远程库信息git-remote-v" tabindex="-1"><a class="header-anchor" href="#查看远程库信息git-remote-v" aria-hidden="true">#</a> 查看远程库信息<code>git remote -v</code></h4><h4 id="推送到远程分支git-push-origin-远程分支名" tabindex="-1"><a class="header-anchor" href="#推送到远程分支git-push-origin-远程分支名" aria-hidden="true">#</a> 推送到远程分支<code>git push origin &lt;远程分支名&gt;</code></h4><blockquote><p>哪些分支要推送到远程?</p><p><code>master</code>分支是主分支，因此要时刻与远程同步.</p><p><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步.</p><p><code>bug</code>分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug.</p><p><code>feature</code>分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发.</p></blockquote><blockquote><p>推送失败?</p><p>可能是远程的版本和本地版本有冲突. 此时需要先<code>git pull</code>拉取最新的版本, 在本地解决冲突后再重新<code>git push</code>提交.</p></blockquote><h3 id="_5-6-分支变基" tabindex="-1"><a class="header-anchor" href="#_5-6-分支变基" aria-hidden="true">#</a> 5.6 分支变基</h3><p>在分支合并中, 除了使用<code>git merge</code>外, 还可以使用<code>git rebase</code>来合并分支, 实现的最终合并效果一样. 但<code>git log</code>展示的记录内容不同.</p><ol><li><code>git merge</code>: 保留完整日志, 但长久之后log较为混乱.</li><li><code>git rebase</code>: 重建日志, 日志清爽, 但会丢失部分内容.</li></ol><blockquote><p>Tips: 只在本地分支使用<code>rebase</code>指令, 不要对已经公开的提交内容做变动.</p></blockquote><p>rebase的原理是将每个变基分支的commit的变动内容重新在的当前分支上合并。</p>`,65),o=[c];function r(h,n){return d(),a("div",null,o)}const p=e(i,[["render",r],["__file","Gitjichuxuexi.html.vue"]]);export{p as default};
