import{_ as e,o as a,c as i,d as r}from"./app-4023f1b2.js";const o={},t=r('<h1 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h1><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><blockquote><p>对于工厂类型的类，只需要有一个就能够完成实例的创建工作。</p></blockquote><h2 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想" aria-hidden="true">#</a> 设计思想</h2><blockquote><p>控制类的创建次数，减少系统开销。</p></blockquote><h2 id="在-jdk-和-spring-中的应用案例" tabindex="-1"><a class="header-anchor" href="#在-jdk-和-spring-中的应用案例" aria-hidden="true">#</a> 在 JDK 和 Spring 中的应用案例</h2><blockquote><p>JDK: Runtime、Logger</p><p>Spring: Bean、DataSource</p></blockquote><h2 id="使用总结" tabindex="-1"><a class="header-anchor" href="#使用总结" aria-hidden="true">#</a> 使用总结</h2><ol><li>单例模式分懒汉和饿汉两种，需要注意各种实现的线程安全性</li><li>枚举是最高效且稳定的单例实现，推荐使用。在需要实现业务逻辑时选择其他类型的实现。</li><li>高资源消耗的类尽量使用单例模式进行控制。</li></ol>',9),d=[t];function h(n,c){return a(),i("div",null,d)}const s=e(o,[["render",h],["__file","danlimoshi.html.vue"]]);export{s as default};
