import{_ as n,o as s,c as a,d as e}from"./app-4023f1b2.js";const p={},t=e(`<h1 id="postgresql相似度比较函数" tabindex="-1"><a class="header-anchor" href="#postgresql相似度比较函数" aria-hidden="true">#</a> PostgreSQL相似度比较函数</h1><h2 id="通过插件实现" tabindex="-1"><a class="header-anchor" href="#通过插件实现" aria-hidden="true">#</a> 通过插件实现</h2><p>手动添加<code>pg_trgm</code>扩展来实现相似度对比。提供了两种方式</p><ol><li>Levenshtein距离：这是一种衡量两个字符串之间差异的方法，可以通过pg_trgm扩展来计算。首先，你需要安装pg_trgm扩展，然后可以使用levenshtein函数来计算两个字符串之间的Levenshtein距离。</li><li>Jaccard相似度：这也是通过pg_trgm扩展来实现的，它基于字符串中三字母组合（trigrams）的相似度。可以使用similarity函数来计算两个字符串的Jaccard相似度。</li></ol><blockquote><p>此种方式受限于服务器操作权限，很多情况下不能操作到数据库添加扩展。</p></blockquote><h2 id="自定义函数" tabindex="-1"><a class="header-anchor" href="#自定义函数" aria-hidden="true">#</a> 自定义函数</h2><p>添加两个自定义函数，基于Levenshtein距离函数实现相似度计算。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">function</span> similarity<span class="token punctuation">(</span>s1 <span class="token keyword">text</span><span class="token punctuation">,</span> s2 <span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">double</span> <span class="token keyword">precision</span>
    immutable
    <span class="token keyword">language</span> plpgsql
<span class="token keyword">as</span>
$$
<span class="token keyword">DECLARE</span>
  distance <span class="token keyword">integer</span><span class="token punctuation">;</span>
  max_length <span class="token keyword">integer</span><span class="token punctuation">;</span>
<span class="token keyword">BEGIN</span>
  distance :<span class="token operator">=</span> levenshtein_distance<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  max_length :<span class="token operator">=</span> greatest<span class="token punctuation">(</span>length<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> length<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">RETURN</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">(</span>distance::<span class="token keyword">double</span> <span class="token keyword">precision</span> <span class="token operator">/</span> max_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span>
$$<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">function</span> levenshtein_distance<span class="token punctuation">(</span>s1 <span class="token keyword">text</span><span class="token punctuation">,</span> s2 <span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">integer</span>
    immutable
    <span class="token keyword">language</span> plpgsql
<span class="token keyword">as</span>
$$
<span class="token keyword">DECLARE</span>
  m <span class="token keyword">integer</span><span class="token punctuation">;</span>
  n <span class="token keyword">integer</span><span class="token punctuation">;</span>
  d <span class="token keyword">integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  i <span class="token keyword">integer</span><span class="token punctuation">;</span>
  j <span class="token keyword">integer</span><span class="token punctuation">;</span>
  s1_i <span class="token keyword">char</span><span class="token punctuation">;</span>
  s2_j <span class="token keyword">char</span><span class="token punctuation">;</span>
  cost <span class="token keyword">integer</span><span class="token punctuation">;</span>
<span class="token keyword">BEGIN</span>
  m :<span class="token operator">=</span> length<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  n :<span class="token operator">=</span> length<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">-- 初始化二维数组，索引从 1 开始</span>
  d :<span class="token operator">=</span> array_fill<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ARRAY<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">-- 初始化第一行</span>
  <span class="token keyword">FOR</span> i <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span>m<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">LOOP</span>
    d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> :<span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span>

  <span class="token comment">-- 初始化第一列</span>
  <span class="token keyword">FOR</span> j <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">LOOP</span>
    d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> :<span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span>

  <span class="token comment">-- 计算距离</span>
  <span class="token keyword">FOR</span> i <span class="token operator">IN</span> <span class="token number">2.</span><span class="token punctuation">.</span>m<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">LOOP</span>
    s1_i :<span class="token operator">=</span> substring<span class="token punctuation">(</span>s1 <span class="token keyword">FROM</span> i<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">FOR</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">FOR</span> j <span class="token operator">IN</span> <span class="token number">2.</span><span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">LOOP</span>
      s2_j :<span class="token operator">=</span> substring<span class="token punctuation">(</span>s2 <span class="token keyword">FROM</span> j<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">FOR</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">IF</span> s1_i <span class="token operator">=</span> s2_j <span class="token keyword">THEN</span>
        cost :<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">ELSE</span>
        cost :<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
      d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> :<span class="token operator">=</span> least<span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span>
  <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span>

  <span class="token keyword">RETURN</span> d<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span>
$$<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 执行示例</span>
<span class="token keyword">select</span> ynytgz_dap<span class="token punctuation">.</span>similarity<span class="token punctuation">(</span><span class="token string">&#39;曲靖市麒麟区增减挂钩项目建新方案&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;曲靖麒麟增减挂钩项目建案&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>此种方式是字符串相似度的简单实现，能够实现简单的字符串相似度对比，复杂情况下和高性能要求下，需要考虑代码实现，或者添加扩展。</p></blockquote>`,11),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","PostgreSQLxiangsidubijiaohanshu.html.vue"]]);export{r as default};
