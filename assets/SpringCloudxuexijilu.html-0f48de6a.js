import{_ as e,r as p,o,c,a as n,b as s,e as l,d as a}from"./app-4023f1b2.js";const i={},u=a(`<h1 id="springcloud学习记录" tabindex="-1"><a class="header-anchor" href="#springcloud学习记录" aria-hidden="true">#</a> SpringCloud学习记录</h1><h2 id="_1-微服务概念" tabindex="-1"><a class="header-anchor" href="#_1-微服务概念" aria-hidden="true">#</a> 1 微服务概念</h2><p>从单体到集群、从集群到分布式。 分布式组件： - 网关：Nacos - 注册中心：Nacos、Eureka - 远程调用：OpenFeign - 熔断器：Sentinel - 分布式事务：Seata 版本搭配： https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E</p><h2 id="_2-组件学习" tabindex="-1"><a class="header-anchor" href="#_2-组件学习" aria-hidden="true">#</a> 2 组件学习</h2><h3 id="_2-1-注册中心" tabindex="-1"><a class="header-anchor" href="#_2-1-注册中心" aria-hidden="true">#</a> 2.1 注册中心</h3><p>所有应用在上下线的时候，注册和通知到注册中心。这里使用Nacos。</p><blockquote><p>Nacos是阿里云提供的一个服务注册中心，兼具配置中心的功能。</p></blockquote><p>通过docker安装nacos，我这里直接使用最新的3.x版本进行学习。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> nacos-standalone-derby <span class="token parameter variable">-e</span> <span class="token assign-left variable">MODE</span><span class="token operator">=</span>standalone <span class="token parameter variable">-e</span> <span class="token assign-left variable">NACOS_AUTH_TOKEN</span><span class="token operator">=</span>MTM1YTNhYTUtYjI1OS00YzJlLWEzYzYtM2Q0YzE2OTg3NDdh <span class="token parameter variable">-e</span> <span class="token assign-left variable">NACOS_AUTH_IDENTITY_KEY</span><span class="token operator">=</span>nacos <span class="token parameter variable">-e</span> <span class="token assign-left variable">NACOS_AUTH_IDENTITY_VALUE</span><span class="token operator">=</span>nacos <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">-p</span> <span class="token number">8848</span>:8848 <span class="token parameter variable">-p</span> <span class="token number">9848</span>:9848 <span class="token parameter variable">-d</span> nacos/nacos-server:v3.0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),r={href:"https://gitee.com/yiueil/springcloud-study",target:"_blank",rel:"noopener noreferrer"},k=a(`<h4 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构" aria-hidden="true">#</a> 项目结构</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">|</span>   pom.xml
<span class="token operator">|</span>
<span class="token punctuation">\\</span>---services
    <span class="token operator">|</span>   pom.xml
    <span class="token operator">|</span>
    +---service-order
    <span class="token operator">|</span>   <span class="token operator">|</span>   pom.xml
    <span class="token operator">|</span>   <span class="token operator">|</span>
    <span class="token operator">|</span>   <span class="token punctuation">\\</span>---src
    <span class="token operator">|</span>       +---main
    <span class="token operator">|</span>       <span class="token operator">|</span>   +---java
    <span class="token operator">|</span>       <span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token punctuation">\\</span>---cc
    <span class="token operator">|</span>       <span class="token operator">|</span>   <span class="token operator">|</span>       <span class="token punctuation">\\</span>---yiueil
    <span class="token operator">|</span>       <span class="token operator">|</span>   <span class="token operator">|</span>               OrderApplication.java
    <span class="token operator">|</span>       <span class="token operator">|</span>   <span class="token operator">|</span>
    <span class="token operator">|</span>       <span class="token operator">|</span>   <span class="token punctuation">\\</span>---resources
    <span class="token operator">|</span>       <span class="token operator">|</span>           application.yml
    <span class="token operator">|</span>       <span class="token operator">|</span>
    <span class="token operator">|</span>       <span class="token punctuation">\\</span>---test
    <span class="token operator">|</span>           <span class="token punctuation">\\</span>---java
    <span class="token punctuation">\\</span>---service-product
        <span class="token operator">|</span>   pom.xml
        <span class="token operator">|</span>
        <span class="token punctuation">\\</span>---src
            +---main
            <span class="token operator">|</span>   +---java
            <span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token punctuation">\\</span>---cc
            <span class="token operator">|</span>   <span class="token operator">|</span>       <span class="token punctuation">\\</span>---yiueil
            <span class="token operator">|</span>   <span class="token operator">|</span>               ProductApplication.java
            <span class="token operator">|</span>   <span class="token operator">|</span>
            <span class="token operator">|</span>   <span class="token punctuation">\\</span>---resources
            <span class="token operator">|</span>           application.yml
            <span class="token operator">|</span>
            <span class="token punctuation">\\</span>---test
                <span class="token punctuation">\\</span>---java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，services模块下面包含了两个服务，一个订单服务，一个商品服务。 servers的pom.xml相关配置内容：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cc.yiueil<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud-study<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>service-order<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>service-product<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- nacos依赖 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2021.0.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="订单模块代码" tabindex="-1"><a class="header-anchor" href="#订单模块代码" aria-hidden="true">#</a> 订单模块代码</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>order
  <span class="token comment"># nacos相关配置 指定nacos注册中心地址</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="商品模块代码" tabindex="-1"><a class="header-anchor" href="#商品模块代码" aria-hidden="true">#</a> 商品模块代码</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9000</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>product
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="复制配置模拟启动多个节点" tabindex="-1"><a class="header-anchor" href="#复制配置模拟启动多个节点" aria-hidden="true">#</a> 复制配置模拟启动多个节点</h4><p>idea中在services中，选中对应的配置节点，右键复制配置，然后在java下面的program args中添加参数<code>--server.port=9001</code>即可。 <img src="https://files.catbox.moe/9taazd.png" alt="9taazd.png"><img src="https://files.catbox.moe/fe6mn1.png" alt="fe6mn1.png"></p><h4 id="代码获取可用的服务列表" tabindex="-1"><a class="header-anchor" href="#代码获取可用的服务列表" aria-hidden="true">#</a> 代码获取可用的服务列表</h4><p>代码中获取到所有的服务并打印，可以实现从nacos页面查看已注册服务相同的效果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductApplicationTest</span> <span class="token punctuation">{</span>

    <span class="token comment">// Spring提供的微服务调用接口</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">DiscoveryClient</span> discoveryClient<span class="token punctuation">;</span>

    <span class="token comment">// Nacos提供的微服务调用结构</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">NacosServiceDiscovery</span> nacosServiceDiscovery<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> services <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> service <span class="token operator">:</span> services<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;service: &quot;</span> <span class="token operator">+</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceInstance</span> instance <span class="token operator">:</span> instances<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ip&quot;</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, port&quot;</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> services <span class="token operator">=</span> nacosServiceDiscovery<span class="token punctuation">.</span><span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> service <span class="token operator">:</span> services<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;service: &quot;</span> <span class="token operator">+</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> nacosServiceDiscovery<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceInstance</span> instance <span class="token operator">:</span> instances<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ip&quot;</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, port&quot;</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="调用流程" tabindex="-1"><a class="header-anchor" href="#调用流程" aria-hidden="true">#</a> 调用流程</h4><ol><li>消费方从注册中心获取可用服务方。</li><li>返回可用的服务方访问地址和端口。</li><li>消费方通过访问的地址和端口发起远程过程调用。</li></ol><h4 id="负载均衡的方式来发起远程过程调用" tabindex="-1"><a class="header-anchor" href="#负载均衡的方式来发起远程过程调用" aria-hidden="true">#</a> 负载均衡的方式来发起远程过程调用</h4><h5 id="基于loadbalancerclient选择" tabindex="-1"><a class="header-anchor" href="#基于loadbalancerclient选择" aria-hidden="true">#</a> 基于LoadbalancerClient选择</h5><p>添加loadbalancer场景。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--loadbalancer负载均衡--&gt;</span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用LoadbalancerClient客户端选择客户端：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplicationTest</span> <span class="token punctuation">{</span>  
  
    <span class="token annotation punctuation">@Autowired</span>  
    <span class="token class-name">LoadBalancerClient</span> loadBalancerClient<span class="token punctuation">;</span>  
  
    <span class="token annotation punctuation">@Test</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token class-name">ServiceInstance</span> choose <span class="token operator">=</span> loadBalancerClient<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">&quot;service-product&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;choose: &quot;</span> <span class="token operator">+</span> choose<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="基于负载均衡的resttemplate组件" tabindex="-1"><a class="header-anchor" href="#基于负载均衡的resttemplate组件" aria-hidden="true">#</a> 基于负载均衡的RestTemplate组件</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfiguration</span> <span class="token punctuation">{</span>  
  
    <span class="token annotation punctuation">@LoadBalanced</span>  
    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplicationTest</span> <span class="token punctuation">{</span>  
  
    <span class="token annotation punctuation">@Autowired</span>  
    <span class="token class-name">LoadBalancerClient</span> loadBalancerClient<span class="token punctuation">;</span>  
  
    <span class="token annotation punctuation">@Autowired</span>  
    <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>  
  
    <span class="token annotation punctuation">@Test</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token class-name">ServiceInstance</span> choose <span class="token operator">=</span> loadBalancerClient<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">&quot;service-product&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;choose: &quot;</span> <span class="token operator">+</span> choose<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Test</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
	    <span class="token comment">// 通过负载均衡注解标注的restTemplate通过服务名service-product实现负载均衡调用</span>
        <span class="token class-name">ProductEntity</span> <span class="token class-name">ProductEntity</span> <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://service-product/getProduct?id=1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ProductEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ProductEntity: &quot;</span> <span class="token operator">+</span> <span class="token class-name">ProductEntity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注册中心挂了-还能否进行微服务调用" tabindex="-1"><a class="header-anchor" href="#注册中心挂了-还能否进行微服务调用" aria-hidden="true">#</a> 注册中心挂了，还能否进行微服务调用</h4><ul><li>如果是第一次调用，拿不到目标服务地址，则调用不通。</li><li>如果是第二次或者n次，直接通过缓存读取目标服务地址，可用调用通。</li></ul><h3 id="_2-2-配置中心" tabindex="-1"><a class="header-anchor" href="#_2-2-配置中心" aria-hidden="true">#</a> 2.2 配置中心</h3><p>配置中心实现了不下线的配置更新。</p><h4 id="初步使用配置中心" tabindex="-1"><a class="header-anchor" href="#初步使用配置中心" aria-hidden="true">#</a> 初步使用配置中心</h4><p>加入nacos作为配置中心的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--nacos作为配置中心--&gt;</span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>nacos中完成对于配置的添加： <img src="https://files.catbox.moe/jfxos5.png" alt="jfxos5.png"></p><p>编写代码使用相关配置：</p><blockquote><p>这里使用了@Value和@RefushScope两个注解，@Value不解释，@RefushScope用于自动刷新配置中心的配置, 以便于在不重启的情况下, 从配置中心更新数据。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 此注解 用于自动刷新配置中心的配置, 以便于在不重启的情况下, 从配置中心更新数据</span>
<span class="token annotation punctuation">@RefreshScope</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">OrderController</span><span class="token punctuation">(</span><span class="token class-name">OrderService</span> orderService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>orderService <span class="token operator">=</span> orderService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;\${order.timeout}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> timeout<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;\${order.auto-confirm}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> confirm<span class="token punctuation">;</span>


    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/createOrder&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">OrderEntity</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Long</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/getConfig&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s, %s&quot;</span><span class="token punctuation">,</span> confirm<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="configurationproperties无感刷新" tabindex="-1"><a class="header-anchor" href="#configurationproperties无感刷新" aria-hidden="true">#</a> @ConfigurationProperties无感刷新</h4><blockquote><p>如果需要将配置绑定到Properties对象，可用@ConfigurationProperties，并且该方式可以实现无感刷新。即不需要额外使用@RefreshScope注解。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>  
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;order&quot;</span><span class="token punctuation">)</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderProperties</span> <span class="token punctuation">{</span>  
    <span class="token keyword">private</span> <span class="token class-name">String</span> timeout<span class="token punctuation">;</span>  
  
    <span class="token keyword">private</span> <span class="token class-name">String</span> autoConfirm<span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>  
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">OrderProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>  
  
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>  
  
    <span class="token keyword">public</span> <span class="token class-name">OrderController</span><span class="token punctuation">(</span><span class="token class-name">OrderService</span> orderService<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>orderService <span class="token operator">=</span> orderService<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    
    <span class="token annotation punctuation">@Autowired</span>  
    <span class="token keyword">private</span> <span class="token class-name">OrderProperties</span> orderProperties<span class="token punctuation">;</span>  
    
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/getConfigByProperties&quot;</span><span class="token punctuation">)</span>  
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigByProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">return</span> orderProperties<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="nacosconfigmanager编程实现监听配置变化" tabindex="-1"><a class="header-anchor" href="#nacosconfigmanager编程实现监听配置变化" aria-hidden="true">#</a> @NacosConfigManager编程实现监听配置变化</h4><blockquote><p>可以通过@NacosConfigManager对象来对配置变化进行响应操作。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	<span class="token comment">// ApplicationRunner会随着SpringBoot启动而注册</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">ApplicationRunner</span> <span class="token function">applicationRunner</span><span class="token punctuation">(</span><span class="token class-name">NacosConfigManager</span> nacosConfigManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> args <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">ConfigService</span> configService <span class="token operator">=</span> nacosConfigManager<span class="token punctuation">.</span><span class="token function">getConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            configService<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">&quot;service-order.properties&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DEFAULT_GROUP&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		            <span class="token comment">// 返回一个线程池</span>
                    <span class="token keyword">return</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveConfigInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> configString<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		            <span class="token comment">// 具体的消息变化的代码</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;邮件通知&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>configString<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="题目-项目中的application-properties和配置中心的application-properties谁的优先级更高" tabindex="-1"><a class="header-anchor" href="#题目-项目中的application-properties和配置中心的application-properties谁的优先级更高" aria-hidden="true">#</a> 题目：项目中的application.properties和配置中心的application.properties谁的优先级更高？</h4><p>从设计角度来说，外部配置优先于内部配置，所以配置中心的application.properties优先级更高。然后合并两部分配置，存入环境变量Environment中。如果同时导入多个配置文件，先声明的配置为高优先级配置。</p><ul><li>先导入优先</li><li>外部配置优先</li></ul><h4 id="nacos中多环境配置" tabindex="-1"><a class="header-anchor" href="#nacos中多环境配置" aria-hidden="true">#</a> Nacos中多环境配置</h4><blockquote><p>如何在配置中心中，定义多个环境：开发、测试、生产？</p></blockquote><p>图形定义：</p><ul><li>通过项目中启动环境，来匹配对应的配置中心命名空间，最后决定要生效的配置组。 <ul><li>nacos名称空间-&gt;服务环境</li><li>nacos分组-&gt;微服务模块</li><li>nacos数据集-&gt;微服务配置 <img src="https://files.catbox.moe/5hp69p.png" alt="5hp69p.png"></li></ul></li></ul><h3 id="_2-3-远程调用" tabindex="-1"><a class="header-anchor" href="#_2-3-远程调用" aria-hidden="true">#</a> 2.3 远程调用</h3><blockquote><p>使用RestTemplate进行远程调用属于编程式的远程调用。可以使用OpenFeign实现声明式的远程调用。</p></blockquote><h4 id="_2-3-1-初步使用" tabindex="-1"><a class="header-anchor" href="#_2-3-1-初步使用" aria-hidden="true">#</a> 2.3.1 初步使用</h4><h5 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> 引入依赖</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="使用注解开启远程调用" tabindex="-1"><a class="header-anchor" href="#使用注解开启远程调用" aria-hidden="true">#</a> 使用注解开启远程调用</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token comment">// 关键启用注解</span>
<span class="token annotation punctuation">@EnableFeignClients</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">JdbcProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>
	<span class="token comment">// 主类其他内容省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="创建远程调用feign客户端" tabindex="-1"><a class="header-anchor" href="#创建远程调用feign客户端" aria-hidden="true">#</a> 创建远程调用feign客户端</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cc<span class="token punctuation">.</span>yiueil<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">ProductEntity</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">FeignClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span></span><span class="token punctuation">;</span>

<span class="token comment">// 指定目标微服务名称</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;service-product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductServiceRemote</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;getProduct&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">ProductEntity</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 其他类中调用</span>
<span class="token annotation punctuation">@Slf4j</span>  
<span class="token annotation punctuation">@Service</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Autowired</span>  
    <span class="token class-name">DiscoveryClient</span> discoveryClient<span class="token punctuation">;</span>  
  
    <span class="token annotation punctuation">@Autowired</span>  
    <span class="token class-name">LoadBalancerClient</span> loadBalancerClient<span class="token punctuation">;</span>  
  
    <span class="token annotation punctuation">@Autowired</span>  
    <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>  
  
    <span class="token comment">// 使用OpenFeign客户端进行调用  </span>
    <span class="token annotation punctuation">@Autowired</span>  
    <span class="token class-name">ProductServiceRemote</span> productServiceRemote<span class="token punctuation">;</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">OrderEntity</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">OrderEntity</span> orderEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        orderEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        orderEntity<span class="token punctuation">.</span><span class="token function">setProductId</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        orderEntity<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        orderEntity<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// 计算总价 调用远程过程调用获取商品的价格  </span>
        <span class="token class-name">ProductEntity</span> productEntity <span class="token operator">=</span> <span class="token function">getProductRemote2</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        orderEntity<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productEntity<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> orderEntity<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>  

    <span class="token keyword">private</span> <span class="token class-name">ProductEntity</span> <span class="token function">getProductRemote2</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> productServiceRemote<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-2-调用第三方api" tabindex="-1"><a class="header-anchor" href="#_2-3-2-调用第三方api" aria-hidden="true">#</a> 2.3.2 调用第三方API</h4><blockquote><p>OpenFeign还具备调用第三方API的能力。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 第三方API的value随意指定, url配置为目标服务器地址</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;weather&quot;</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">&quot;https://devapi.qweather.com&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WeatherClient</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/v7/weather/now&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">getCurrentWeather</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;location&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Controller：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/getCurrentWeather&quot;</span><span class="token punctuation">)</span>  
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCurrentWeather</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;location&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> weatherClient<span class="token punctuation">.</span><span class="token function">getCurrentWeather</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-2-openfeign日志" tabindex="-1"><a class="header-anchor" href="#_2-3-2-openfeign日志" aria-hidden="true">#</a> 2.3.2 OpenFeign日志</h4><ul><li>OpenFeign客户端对应的包下添加日志logging.level</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>  
  <span class="token key atrule">level</span><span class="token punctuation">:</span>  
    <span class="token key atrule">cc.yiueil</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>添加一个Bean</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">FULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>具体的输出结果</li></ul><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code><span class="token punctuation">[</span>WeatherClient<span class="token operator">#</span>getCurrentWeather<span class="token punctuation">]</span> <span class="token separator comment">---</span><span class="token operator">&gt;</span> GET <span class="token url">https://devapi.qweather.com/v7/weather/now?key=05a7f0bd73854f75b704e3731658d80a&amp;location=101290101</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>
<span class="token punctuation">[</span>WeatherClient<span class="token operator">#</span>getCurrentWeather<span class="token punctuation">]</span> <span class="token separator comment">---</span><span class="token operator">&gt;</span> END HTTP <span class="token operator">(</span><span class="token number">0</span><span class="token operator">-</span>byte body<span class="token operator">)</span>
<span class="token punctuation">[</span>WeatherClient<span class="token operator">#</span>getCurrentWeather<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token separator comment">---</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">200</span> <span class="token operator">(</span><span class="token number">370ms</span><span class="token operator">)</span>
<span class="token punctuation">[</span>WeatherClient<span class="token operator">#</span>getCurrentWeather<span class="token punctuation">]</span> <span class="token property">access-control-allow-headers:</span> <span class="token operator">*</span>
<span class="token punctuation">[</span>WeatherClient<span class="token operator">#</span>getCurrentWeather<span class="token punctuation">]</span> <span class="token property">access-control-allow-methods:</span> <span class="token operator">*</span>
<span class="token punctuation">[</span>WeatherClient<span class="token operator">#</span>getCurrentWeather<span class="token punctuation">]</span> <span class="token property">access-control-allow-origin:</span> <span class="token operator">*</span>
<span class="token punctuation">[</span>WeatherClient<span class="token operator">#</span>getCurrentWeather<span class="token punctuation">]</span> <span class="token property">connection:</span> keep<span class="token operator">-</span>alive
<span class="token punctuation">[</span>WeatherClient<span class="token operator">#</span>getCurrentWeather<span class="token punctuation">]</span> <span class="token property">content-encoding:</span> gzip
<span class="token punctuation">[</span>WeatherClient<span class="token operator">#</span>getCurrentWeather<span class="token punctuation">]</span> <span class="token property">content-length:</span> <span class="token number">314</span>
<span class="token punctuation">[</span>WeatherClient<span class="token operator">#</span>getCurrentWeather<span class="token punctuation">]</span> <span class="token property">content-type:</span> application<span class="token operator">/</span>json
<span class="token punctuation">[</span>WeatherClient<span class="token operator">#</span>getCurrentWeather<span class="token punctuation">]</span> <span class="token property">date:</span> Sat<span class="token punctuation">,</span> <span class="token date number">14 Jun 2025</span> <span class="token time number">19:37:22</span> GMT
<span class="token punctuation">[</span>WeatherClient<span class="token operator">#</span>getCurrentWeather<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>WeatherClient<span class="token operator">#</span>getCurrentWeather<span class="token punctuation">]</span> <span class="token operator">{</span><span class="token string">&quot;code&quot;</span><span class="token operator">:</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;updateTime&quot;</span><span class="token operator">:</span><span class="token string">&quot;2025-06-15T03:36+08:00&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;fxLink&quot;</span><span class="token operator">:</span><span class="token string">&quot;https://www.qweather.com/weather/kunming-101290101.html&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;now&quot;</span><span class="token operator">:</span><span class="token operator">{</span><span class="token string">&quot;obsTime&quot;</span><span class="token operator">:</span><span class="token string">&quot;2025-06-15T03:22+08:00&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;temp&quot;</span><span class="token operator">:</span><span class="token string">&quot;18&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;feelsLike&quot;</span><span class="token operator">:</span><span class="token string">&quot;19&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;icon&quot;</span><span class="token operator">:</span><span class="token string">&quot;104&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;text&quot;</span><span class="token operator">:</span><span class="token string">&quot;阴&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;wind360&quot;</span><span class="token operator">:</span><span class="token string">&quot;135&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;windDir&quot;</span><span class="token operator">:</span><span class="token string">&quot;东南风&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;windScale&quot;</span><span class="token operator">:</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;windSpeed&quot;</span><span class="token operator">:</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;humidity&quot;</span><span class="token operator">:</span><span class="token string">&quot;89&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;precip&quot;</span><span class="token operator">:</span><span class="token string">&quot;0.0&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;pressure&quot;</span><span class="token operator">:</span><span class="token string">&quot;808&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;vis&quot;</span><span class="token operator">:</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;cloud&quot;</span><span class="token operator">:</span><span class="token string">&quot;99&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;dew&quot;</span><span class="token operator">:</span><span class="token string">&quot;16&quot;</span><span class="token operator">}</span><span class="token punctuation">,</span><span class="token string">&quot;refer&quot;</span><span class="token operator">:</span><span class="token operator">{</span><span class="token string">&quot;sources&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;QWeather&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&quot;license&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;QWeather Developers License&quot;</span><span class="token punctuation">]</span><span class="token operator">}</span><span class="token operator">}</span>
<span class="token punctuation">[</span>WeatherClient<span class="token operator">#</span>getCurrentWeather<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token separator comment">---</span> END HTTP <span class="token operator">(</span><span class="token number">445</span><span class="token operator">-</span>byte body<span class="token operator">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-4-超时控制" tabindex="-1"><a class="header-anchor" href="#_2-3-4-超时控制" aria-hidden="true">#</a> 2.3.4 超时控制</h4><blockquote><p>如果远程过程调用不设置超时，将一直卡住，导致慢响应。最简单的做法，可以通过超时控制解决。但是需要注意：通常这个远程调用的时间控制要到位，不然无法拿到返回的结果。</p></blockquote><p>超时时间：</p><ul><li>连接超时时间：类似打电话的时候，嘟嘟嘟的情况。默认10秒</li><li>读取超时时间：类似打电话的时候，你问对面问题，对面多少时间没回复表示对面掉线了。默认60秒</li></ul><p>修改默认超时时间，修改application.yml中的OpenFeign的connectTimeout和readTimeout两个配置。 application-feign.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 4.x版本后面的配置在spring.cloud.openfeign.client.config下面</span>
<span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token comment"># 全局</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span>
        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>
        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>
      <span class="token comment"># 特定服务</span>
      <span class="token key atrule">service-product</span><span class="token punctuation">:</span>
        <span class="token comment"># this(100L, TimeUnit.SECONDS.toMillis(1L), 5); 100 以渐进式时间间隔（100ms→1s）尝试最多5次操作。</span>
        <span class="token comment"># 也可以添加 @Bean 返回一个Retryer对象也可以实现</span>
        <span class="token comment"># retryer: feign.Retryer.Default</span>
        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">2000</span>
        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">2000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-5-重试机制" tabindex="-1"><a class="header-anchor" href="#_2-3-5-重试机制" aria-hidden="true">#</a> 2.3.5 重试机制</h4><blockquote><p>远程调用可能失败，可以引入重试机制，直到返回成功，默认不重试。</p></blockquote><p>修改application.yml设置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">retryer</span><span class="token punctuation">:</span> feign.retryer.Default
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者是自定义重试器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryerConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Retryer</span> <span class="token function">retryer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Retryer<span class="token punctuation">.</span>Default</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">10L</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-6-拦截器" tabindex="-1"><a class="header-anchor" href="#_2-3-6-拦截器" aria-hidden="true">#</a> 2.3.6 拦截器</h4><blockquote><p>支持定制请求拦截器和响应拦截器，实现类似传入token和解释响应结果的通用功能。</p></blockquote><ul><li>集成feign.RequestInterceptor定义拦截器</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">feign<span class="token punctuation">.</span></span><span class="token class-name">RequestInterceptor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">feign<span class="token punctuation">.</span></span><span class="token class-name">RequestTemplate</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">UUID</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">RequestInterceptor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestTemplate</span> requestTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;yl-token&quot;</span><span class="token punctuation">,</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用自定义的拦截器 <ul><li>通过配置添加Interceptor配置</li></ul></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token comment"># 全局</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span>
        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>
        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>
      <span class="token comment"># 特定服务</span>
      <span class="token key atrule">service-product</span><span class="token punctuation">:</span>
        <span class="token comment"># 通过配置使用拦截器</span>
        <span class="token key atrule">request-interceptors</span><span class="token punctuation">:</span>
         <span class="token punctuation">-</span> cc.yiueil.interceptor.TokenInterceptor
        <span class="token comment"># this(100L, TimeUnit.SECONDS.toMillis(1L), 5); 100 以渐进式时间间隔（100ms→1s）尝试最多5次操作。</span>
        <span class="token comment"># 也可以添加 @Bean 返回一个Retryer对象也可以实现</span>
        <span class="token comment"># retryer: feign.Retryer.Default</span>
        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">2000</span>
        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">2000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>- 通过给容器中添加Interceptor的Bean
</code></pre><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RequestInterceptor</span> <span class="token function">requestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TokenInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-7-fallback机制" tabindex="-1"><a class="header-anchor" href="#_2-3-7-fallback机制" aria-hidden="true">#</a> 2.3.7 Fallback机制</h4><blockquote><p>当远程调用失败，请求结果无法获取时，给定保底结果。如获取最后的缓存结果，或者是默认数据。</p></blockquote><ul><li>在对应的远程调用接口下可以创建fallback目录。</li><li>目录下面添加fallback实现类，对feign接口进行实现，并加入到容器内。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductServiceRemoteImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ProductServiceRemote</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ProductEntity</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>@FeignClient指定兜底类</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 指定目标微服务名称</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;service-product&quot;</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token class-name">ProductServiceRemoteFallback</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductServiceRemote</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;getProduct&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">ProductEntity</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>导入sentinel依赖，开启对应配置<code>feign.sentinel.enabled</code>为true即可。</li></ul><h3 id="_2-4-服务保护" tabindex="-1"><a class="header-anchor" href="#_2-4-服务保护" aria-hidden="true">#</a> 2.4 服务保护</h3><blockquote><p>服务保护，常用限流、熔断、降级等策略，防止服务器崩溃。这里使用Alibaba的Sentinel。</p></blockquote><ul><li>流量控制（FlowRule）：即限流。</li><li>熔断降级（DegradeRule）：兜底回调。</li><li>系统保护（SystemRule）：根据系统Cpu等硬件资源决定服务策略。</li><li>来源控制（AuthorityRule）：黑白名单。</li><li>热点参数（ParamFlowRule）：定义热点参数，使用缓存等。 工作原理：</li><li>用户访问资源</li><li>根据目标资源查看对应规则 <ul><li>符合规则，进行放行。</li><li>如果违反规则，抛出异常，执行兜底。 <ul><li>有兜底回调，调用兜底处理逻辑。</li><li>未编写兜底回调，进行默认错误返回。</li></ul></li></ul></li><li>结束处理。</li></ul><h4 id="_2-4-1-安装sentinel" tabindex="-1"><a class="header-anchor" href="#_2-4-1-安装sentinel" aria-hidden="true">#</a> 2.4.1 安装Sentinel</h4><h5 id="安装和启动sentinel-dashboard" tabindex="-1"><a class="header-anchor" href="#安装和启动sentinel-dashboard" aria-hidden="true">#</a> 安装和启动Sentinel DashBoard</h5><blockquote><p>下载地址：https://github.com/alibaba/Sentinel/releases</p></blockquote><p>运行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-Dserver.port</span><span class="token operator">=</span><span class="token number">8081</span> <span class="token parameter variable">-Dcsp.sentinel.dashboard.server</span><span class="token operator">=</span>localhost:8081 <span class="token parameter variable">-Dproject.name</span><span class="token operator">=</span>sentinel-dashboard <span class="token parameter variable">-jar</span> sentinel-dashboard-1.8.8.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="微服务项目接入sentinel-dashboard" tabindex="-1"><a class="header-anchor" href="#微服务项目接入sentinel-dashboard" aria-hidden="true">#</a> 微服务项目接入Sentinel DashBoard</h5><p>1、项目引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--sentinel熔断器--&gt;</span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、application.yml中配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
	  <span class="token comment"># 启动即注册到sentinel</span>
      <span class="token key atrule">eager</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">transport</span><span class="token punctuation">:</span>
        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8081</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="定义受保护的资源" tabindex="-1"><a class="header-anchor" href="#定义受保护的资源" aria-hidden="true">#</a> 定义受保护的资源</h5><p>1、使用@SentinelResource定义资源</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>
	<span class="token comment">// 使用SentinelResource注解定义, 并指定最终的名称</span>
    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;createOrder&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">OrderEntity</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">OrderEntity</span> orderEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderEntity<span class="token punctuation">.</span><span class="token function">setProductId</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderEntity<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderEntity<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算总价 调用远程过程调用获取商品的价格</span>
        <span class="token class-name">ProductEntity</span> productEntity <span class="token operator">=</span> <span class="token function">getProductRemote2</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderEntity<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productEntity<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> orderEntity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、进行访问测试 <img src="https://s2.loli.net/2025/06/15/hwmMbqCs7dAZvRG.png" alt="hwmMbqCs7dAZvRG.png"></p><p>3、Dashborad中操作</p><ul><li>簇点链路中找到对应的资源</li><li>点击流控 <img src="https://s2.loli.net/2025/06/15/m9DM4iKHRbreUNq.png" alt="m9DM4iKHRbreUNq.png"></li><li>对QPS进行限制： 单机阈值即每秒接口可以访问的次数，超过默认进行快速失败。 <img src="https://s2.loli.net/2025/06/15/ziVrhROX58YgZ21.png" alt="ziVrhROX58YgZ21.png"></li></ul><h4 id="_2-4-2-异常处理逻辑" tabindex="-1"><a class="header-anchor" href="#_2-4-2-异常处理逻辑" aria-hidden="true">#</a> 2.4.2 异常处理逻辑</h4><blockquote><p>现阶段为前后端分离项目居多，默认的当规则不符合时，会返回默认报错，需要进行异常处理，统一返回结果。针对不同类型的资源，默认的异常处理逻辑有所不同。</p></blockquote><p><img src="https://s2.loli.net/2025/06/15/oEamBScfV9qwT6C.png" alt="oEamBScfV9qwT6C.png"></p><h5 id="web接口" tabindex="-1"><a class="header-anchor" href="#web接口" aria-hidden="true">#</a> Web接口</h5><p>源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> resourceName <span class="token operator">=</span> <span class="token function">getResourceName</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">increaseReferece</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseWebMvcConfig<span class="token punctuation">.</span><span class="token function">getRequestRefName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
            <span class="token comment">// Parse the request origin using registered origin parser.</span>
            <span class="token class-name">String</span> origin <span class="token operator">=</span> <span class="token function">parseOrigin</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> contextName <span class="token operator">=</span> <span class="token function">getContextName</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ContextUtil</span><span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span>contextName<span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">,</span> <span class="token class-name">ResourceTypeConstants</span><span class="token punctuation">.</span><span class="token constant">COMMON_WEB</span><span class="token punctuation">,</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>baseWebMvcConfig<span class="token punctuation">.</span><span class="token function">getRequestAttributeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
	            <span class="token comment">// 重点是这里, 对block阻塞异常进行捕获处理</span>
                <span class="token function">handleBlockException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token class-name">ContextUtil</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleBlockException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> e<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>baseWebMvcConfig<span class="token punctuation">.</span><span class="token function">getBlockExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 这里端点了解到baseWebMvcConfig.getBlockExceptionHandler()默认的组件是DefaultBlockExceptionHandler</span>
            baseWebMvcConfig<span class="token punctuation">.</span><span class="token function">getBlockExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// Throw BlockException directly. Users need to handle it in Spring global exception handler.</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DefaultBlockExceptionHandler</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultBlockExceptionHandler</span> <span class="token keyword">implements</span> <span class="token class-name">BlockExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// Return 429 (Too Many Requests) by default.</span>
        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">429</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Blocked by Sentinel (flow limiting)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>替换实现： 容器中添加BlockExceptionHandler的实现类即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomWebBlockInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">BlockExceptionHandler</span> <span class="token punctuation">{</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  
        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;application/json;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">ResultVo</span> failResult <span class="token operator">=</span> <span class="token class-name">ResultVo</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&quot;Blocked by Sentinel (flow limiting)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>failResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="sentinelresource标注类型" tabindex="-1"><a class="header-anchor" href="#sentinelresource标注类型" aria-hidden="true">#</a> @SentinelResource标注类型</h5><blockquote><p>对于这种类型的异常，大部分情况可以使用SpringBoot全局异常处理解决。对于一些特殊的内容，可以额外定义blockHandler来处理。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;createOrder&quot;</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">&quot;createOrderBlockHandler&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">OrderEntity</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">OrderEntity</span> orderEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderEntity<span class="token punctuation">.</span><span class="token function">setProductId</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderEntity<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderEntity<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算总价 调用远程过程调用获取商品的价格</span>
        <span class="token class-name">ProductEntity</span> productEntity <span class="token operator">=</span> <span class="token function">getProductRemote2</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderEntity<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productEntity<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> orderEntity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	<span class="token comment">// 需要注意的点: 必须携带参数BlockException, 否则这个BlockHandler无法生效</span>
    <span class="token keyword">public</span> <span class="token class-name">OrderEntity</span> <span class="token function">createOrderBlockHandler</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> blockException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        blockException<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OrderEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="openfeign调用" tabindex="-1"><a class="header-anchor" href="#openfeign调用" aria-hidden="true">#</a> OpenFeign调用</h5><blockquote><p>即调用远程微服务的异常处理，具体实现类似前面远程调用章节最后提到的，为远程服务接口添加fallback兜底处理。</p></blockquote><p>远程调用接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 指定目标微服务名称</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;service-product&quot;</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token class-name">ProductServiceRemoteFallback</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductServiceRemote</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;getProduct&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">ProductEntity</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fallback具体实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductServiceRemoteFallback</span> <span class="token keyword">implements</span> <span class="token class-name">ProductServiceRemote</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ProductEntity</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="sphu硬编码方式" tabindex="-1"><a class="header-anchor" href="#sphu硬编码方式" aria-hidden="true">#</a> SphU硬编码方式</h5><blockquote><p>即直接为部分代码进行规则校验，符合则进行返回，否则抛出异常。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">OrderEntity</span> <span class="token function">testOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">OrderEntity</span> orderEntity<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&quot;testRule&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            orderEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderEntity<span class="token punctuation">.</span><span class="token function">setProductId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderEntity<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            orderEntity<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	        <span class="token comment">// 进行异常的处理</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> orderEntity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-3-规则详情" tabindex="-1"><a class="header-anchor" href="#_2-4-3-规则详情" aria-hidden="true">#</a> 2.4.3 规则详情</h4><blockquote><p>前面使用了流控规则中的QBS进行限流规则的使用，这一节详细的学习规则。</p></blockquote><h5 id="流控规则" tabindex="-1"><a class="header-anchor" href="#流控规则" aria-hidden="true">#</a> 流控规则</h5><ul><li>阈值类型</li><li>流控模式 <ul><li>直接：直接对当前资源进行流控。</li><li>链路：对调用链上级进行控制，只对某一个目标调用方进行流控。需要启用需要配置sentinel的<code>web-context-unify</code>为false。</li><li>关联：当某个关联资源访问量较大时，才会使得当前的资源流控规则生效。</li></ul></li><li>流控效果： <ul><li>快速失败：直接失败。</li><li>Warm Up：预热/冷启动，系统逐步增加处理能力。设置QPS和Period，Period为预热时长，多少秒达到QPS。超过预设期的QPS的请求，进行失败处理。</li><li>排队等待：匀速等待，不支持QPS&gt;1000，需要设置QPS和timeout。如果超过timeout最大超时时间，则会失败。参考算法：漏桶算法。</li></ul></li></ul><h5 id="熔断规则" tabindex="-1"><a class="header-anchor" href="#熔断规则" aria-hidden="true">#</a> 熔断规则</h5><blockquote><p>熔断降级，即及时切断不稳定调用，如某个微服务忙，则快速返回不积压。请求不挤压，即可避免服务雪崩。熔断降级相关的配置在调用方。</p></blockquote><p>断路器的工作原理：</p><ul><li>慢调用比例</li><li>异常比例</li><li>异常数</li></ul><h5 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h5>`,147);function d(v,m){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("示例应用，一个经典的订单和产品分布式示例。 项目完整代码地址："),n("a",r,[s("YIueil/springcloud-study"),l(t)])]),k])}const g=e(i,[["render",d],["__file","SpringCloudxuexijilu.html.vue"]]);export{g as default};
