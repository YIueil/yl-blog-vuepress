import{_ as e,r as p,o,c,a as n,b as a,e as i,w as l,d as s}from"./app-4023f1b2.js";const u={},r=s(`<h1 id="spring学习记录" tabindex="-1"><a class="header-anchor" href="#spring学习记录" aria-hidden="true">#</a> Spring学习记录</h1><blockquote><p>代码地址: https://gitee.com/yiueil/spring-study</p></blockquote><h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1 前言</h2><h3 id="java框架历史" tabindex="-1"><a class="header-anchor" href="#java框架历史" aria-hidden="true">#</a> JAVA框架历史</h3><p>为什么舍弃EJB 是重量级框架.什么是重量级框架?</p><ul><li>高容器依赖,可移植性差.依赖于EJB容器,收费且不开源,并且需要实现特定接口.</li></ul><p>spring属于轻量级框架:</p><ul><li>不需要实现额外的接口</li><li>基于 servlet 容器</li></ul><p>主要运用的设计模式:</p><ul><li>工厂模式 (解耦思想：避免对实现类硬编码),重构思路流程 反射+配置文件: <ul><li>new UserServiceImpl()</li><li>class.forName(&quot;cn.yiueil.UserServiceImpl&quot;)</li><li>读取额外properties文件定义:UserService=cn.yiueil.UserServiceImpl替换全限命名</li></ul></li></ul><h2 id="_2-spring-ioc" tabindex="-1"><a class="header-anchor" href="#_2-spring-ioc" aria-hidden="true">#</a> 2 Spring IoC</h2><h3 id="_2-1-创建一个spring工厂" tabindex="-1"><a class="header-anchor" href="#_2-1-创建一个spring工厂" aria-hidden="true">#</a> 2.1 创建一个Spring工厂</h3><h3 id="_2-2-属性注入injection" tabindex="-1"><a class="header-anchor" href="#_2-2-属性注入injection" aria-hidden="true">#</a> 2.2 属性注入Injection</h3><h3 id="_2-3-创建复杂对象" tabindex="-1"><a class="header-anchor" href="#_2-3-创建复杂对象" aria-hidden="true">#</a> 2.3 创建复杂对象</h3><h3 id="_2-4-bean的生命周期" tabindex="-1"><a class="header-anchor" href="#_2-4-bean的生命周期" aria-hidden="true">#</a> 2.4 Bean的生命周期</h3><h4 id="_2-4-1-bean的创建" tabindex="-1"><a class="header-anchor" href="#_2-4-1-bean的创建" aria-hidden="true">#</a> 2.4.1 Bean的创建</h4><p>调用构造方法，创建出对象。</p><h4 id="_2-4-2-di" tabindex="-1"><a class="header-anchor" href="#_2-4-2-di" aria-hidden="true">#</a> 2.4.2 DI</h4><p>调用set方法为properties设置值</p><h4 id="_2-4-3-beanpostprocessor的postprocessbeforeinitialization-执行" tabindex="-1"><a class="header-anchor" href="#_2-4-3-beanpostprocessor的postprocessbeforeinitialization-执行" aria-hidden="true">#</a> 2.4.3 BeanPostProcessor的PostProcessBeforeInitialization()执行</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PokemonBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;postProcessBeforeInitialization ----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-4-initalizingbean的afterpropertiesset-方法执行" tabindex="-1"><a class="header-anchor" href="#_2-4-4-initalizingbean的afterpropertiesset-方法执行" aria-hidden="true">#</a> 2.4.4 initalizingBean的afterPropertiesSet()方法执行</h4><p>如果实现了InitalizingBean，此时会执行afterPropertiesSet()方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Pokemon</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Override</span>  
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  
	    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;afterPropertiesSet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-5-自定义的init-方法执行" tabindex="-1"><a class="header-anchor" href="#_2-4-5-自定义的init-方法执行" aria-hidden="true">#</a> 2.4.5 自定义的init()方法执行</h4><p>调用init-method方法</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pokemon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.yiueil.entity.Pokemon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myInit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-4-6-disposablebean的destroy-方法执行" tabindex="-1"><a class="header-anchor" href="#_2-4-6-disposablebean的destroy-方法执行" aria-hidden="true">#</a> 2.4.6 DisposableBean的destroy()方法执行</h4><p>如果实现了DisposableBean，此时会执行destroy()方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pokemon</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Override</span>  
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  
	    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;destroy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-7-beanpostprocessor的postprocessafterinitialization-执行" tabindex="-1"><a class="header-anchor" href="#_2-4-7-beanpostprocessor的postprocessafterinitialization-执行" aria-hidden="true">#</a> 2.4.7 BeanPostProcessor的postProcessAfterInitialization()执行</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PokemonBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;postProcessAfterInitialization ---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">Pokemon</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Pokemon</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;蒜头王八&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">return</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-8-自定义的destory-方法执行" tabindex="-1"><a class="header-anchor" href="#_2-4-8-自定义的destory-方法执行" aria-hidden="true">#</a> 2.4.8 自定义的destory()方法执行</h4><p>调用destory-method</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;pokemon&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;cn.yiueil.entity.Pokemon&quot;</span> destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">&quot;myDestroy&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-5-ioc总结" tabindex="-1"><a class="header-anchor" href="#_2-5-ioc总结" aria-hidden="true">#</a> 2.5 IoC总结</h3><p>IoC容器（控制反转）主要的作用是控制反转。</p><ol><li>什么是容器？ 提供一系列组件运行的必要基础环境的平台，如tomcat是servlet的运行环境，docker是linux系统运行的运行环境。</li><li>控制反转的好处？ <ol><li>组件调用方不关心组件的初始化、销毁等生命周期管理。如依赖database的组件不需要关系具体的database的实例创建，注入即可用。</li><li>共享组件变得简单，共享组件只需要从容器中获取即可。</li><li>便于测试，测试某个组件时只需要注入必要组件即可。</li></ol></li></ol><h2 id="_3-spring-aop" tabindex="-1"><a class="header-anchor" href="#_3-spring-aop" aria-hidden="true">#</a> 3 Spring AOP</h2><h3 id="_3-1-面向切面编程概念" tabindex="-1"><a class="header-anchor" href="#_3-1-面向切面编程概念" aria-hidden="true">#</a> 3.1 面向切面编程概念</h3><p>切面编程（Aspect-Oriented Programming，简称AOP）是一种编程范式，它允许程序员在不修改业务逻辑代码的情况下，对业务逻辑的不同部分进行横向切入，以实现一些跨越多个点的功能，比如日志记录、事务管理、权限检查、异常处理等。这些跨越多个点的功能通常被称为“横切关注点”（cross-cutting concerns）。</p><p>在传统的面向对象编程（OOP）中，这些横切关注点可能会散布在代码的各个角落，导致代码重复和难以维护。AOP通过将这些关注点模块化，使得代码更加清晰、易于理解和维护。</p><h4 id="aop的核心概念包括" tabindex="-1"><a class="header-anchor" href="#aop的核心概念包括" aria-hidden="true">#</a> AOP的核心概念包括：</h4><ol><li><strong>切面（Aspect）</strong>：切面是横切关注点的模块化，它包含了一组通知（Advice）和一个或多个切入点（Pointcut）。</li><li><strong>通知（Advice）</strong>：通知定义了切面在何时何地被应用，以及应用的方式。常见的通知类型包括： <ul><li>前置通知（Before）：在切入点之前执行。</li><li>后置通知（After）：在切入点之后执行。</li><li>返回通知（After returning）：在切入点正常返回后执行。</li><li>异常通知（After throwing）：在切入点抛出异常后执行。</li><li>环绕通知（Around）：包围切入点的执行，可以在方法执行前后进行自定义操作。</li></ul></li><li><strong>切入点（Pointcut）</strong>：切入点定义了哪些方法或哪些方法的执行可以被切面拦截。它是一个匹配逻辑，用于确定哪些Joinpoint（连接点，通常是方法的调用）需要被切面所拦截。</li><li><strong>目标对象（Target）</strong>：被一个或多个切面所通知的对象。</li><li><strong>织入（Weaving）</strong>：织入是将切面应用到目标对象来创建新的代理对象的过程。这可以在编译时、加载时或运行时进行。</li><li><strong>代理（Proxy）</strong>：AOP框架创建的代理对象（基于JDK或者CGlib字节码技术），它包装了目标对象，并在调用目标对象的方法时，根据切面的定义来插入额外的行为。</li></ol><p>AOP使得开发者可以更专注于业务逻辑本身，而将那些重复的、与业务逻辑无关的功能分离出来，从而提高了代码的重用性和模块化。在Java中，AOP的实现通常依赖于像Spring AOP、AspectJ这样的框架。</p><h3 id="_3-2-spring-动态代理实现" tabindex="-1"><a class="header-anchor" href="#_3-2-spring-动态代理实现" aria-hidden="true">#</a> 3.2 Spring 动态代理实现</h3><h4 id="原始对象" tabindex="-1"><a class="header-anchor" href="#原始对象" aria-hidden="true">#</a> 原始对象</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.yiueil.service.impl.UserServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;user login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;user register&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;user exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="额外功能" tabindex="-1"><a class="header-anchor" href="#额外功能" aria-hidden="true">#</a> 额外功能</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>interceptor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.yiueil.advice.Interceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Interceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>  
        <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Interceptor log &quot;</span><span class="token operator">+</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; start------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">try</span> <span class="token punctuation">{</span>  
            object <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行原始方法  </span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Interceptor log &quot;</span><span class="token operator">+</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; exception------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Interceptor log &quot;</span><span class="token operator">+</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; end------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="切入点表达式" tabindex="-1"><a class="header-anchor" href="#切入点表达式" aria-hidden="true">#</a> 切入点表达式</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* *(..))<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="织入切面" tabindex="-1"><a class="header-anchor" href="#织入切面" aria-hidden="true">#</a> 织入切面</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* *(..))<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
	<span class="token comment">&lt;!--织入--&gt;</span>  
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>before<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>  
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>interceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56),d=s(`<h3 id="_3-3-spring-事务" tabindex="-1"><a class="header-anchor" href="#_3-3-spring-事务" aria-hidden="true">#</a> 3.3 Spring 事务</h3><h5 id="事务属于业务还是额外功能" tabindex="-1"><a class="header-anchor" href="#事务属于业务还是额外功能" aria-hidden="true">#</a> 事务属于业务还是额外功能?</h5><blockquote><p>属于额外功能。</p></blockquote><h5 id="什么是事务" tabindex="-1"><a class="header-anchor" href="#什么是事务" aria-hidden="true">#</a> 什么是事务?</h5><blockquote><p>事务是保证<code>业务操作</code>完整的<code>数据库</code>操作。</p></blockquote><h5 id="如何控制事务" tabindex="-1"><a class="header-anchor" href="#如何控制事务" aria-hidden="true">#</a> 如何控制事务?</h5><blockquote><p>JDBC 中通过 Connect 接口来实现<code>事务创建、事务提交、事务回滚</code>等操作</p><p>Mybatis 中通过操作 SqlSession 来实现<code>事务提交、事务回滚</code>等操作</p><p>Spring 中通过 AOP 的方式实现事务开发</p></blockquote><h5 id="datasourcetransactionmanager-大致实现" tabindex="-1"><a class="header-anchor" href="#datasourcetransactionmanager-大致实现" aria-hidden="true">#</a> DataSourceTransactionManager 大致实现</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;myPointCut()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">aroundTx</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> proceed <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;start tx-------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Connection.setAutoCommit()</span>
            proceed <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;commit tx------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Connection.commit()</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;rollback tx----------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Connection.rollback()</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码中核心依赖的是 Connection 对象, 需要在使用事务操作时, 提前注入数据连接池。</p><h5 id="事务切面的组织形式" tabindex="-1"><a class="header-anchor" href="#事务切面的组织形式" aria-hidden="true">#</a> 事务切面的组织形式</h5><p>注解式事务管理</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myAnnotationAdvice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.yiueil.annotation.MyAnnotationAdvice<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在对应的方法或者类中直接使用 <code>@Transactional</code> 组织切面。</p><p>声明式事务管理</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transactionManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
	
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>txAdvice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transactionManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>
	    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add*<span class="token punctuation">&quot;</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>REQUIRED<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
	  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span>
	
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>
	  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userServicePointcut<span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* com.example.UserService.addUser(..))<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
	  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>txAdvice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userServicePointcut<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编程式事务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取数据库连接</span>
            conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 开始事务</span>
            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行插入操作</span>
            <span class="token comment">// ...</span>
            <span class="token comment">// 提交事务</span>
            conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 发生异常时回滚事务</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// do nothing</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 关闭连接</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// do nothing</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>小结: 编程式强耦合, 已不推荐使用。对于大型项目, 应当使用声明式事务; 对于小型快速开发的项目, 可以选用注解式。</p></blockquote><h5 id="事务属性" tabindex="-1"><a class="header-anchor" href="#事务属性" aria-hidden="true">#</a> 事务属性</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>
	isolation<span class="token operator">=</span><span class="token class-name">Isolation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
	propagation<span class="token operator">=</span><span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
	readOnly<span class="token operator">=</span><span class="token class-name">ReadOnly</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
	timeout<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
	rollbackFor<span class="token operator">=</span><span class="token class-name">RuntimeException</span><span class="token punctuation">.</span><span class="token keyword">class</span>
<span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="隔离属性-isolation" tabindex="-1"><a class="header-anchor" href="#隔离属性-isolation" aria-hidden="true">#</a> 隔离属性 (isolation)</h6><p>描述事务解决并发问题(同一时间访问同一资源)的特征。隔离属性通过<code>加锁</code>对<code>脏读、不可重复读、幻读</code>进行解决。</p><table><thead><tr><th>隔离属性</th><th>存在问题</th><th>是否加锁</th></tr></thead><tbody><tr><td>读未提交 READ_UNCOMMITTED</td><td>脏读、不可不可重复读、幻读重复读、幻读</td><td>无</td></tr><tr><td>读已提交 READ_COMMITTED</td><td>不可重复读、幻读</td><td>快照机制</td></tr><tr><td>可重复读 REPEATABLE_READ</td><td>幻读</td><td>行锁</td></tr><tr><td>序列化 SERIALIZABLE</td><td>无</td><td>表锁</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h6 id="传播属性" tabindex="-1"><a class="header-anchor" href="#传播属性" aria-hidden="true">#</a> 传播属性</h6><p>在Service调用Service时, 会存在<code>事务嵌套</code>，为了避免事务嵌套, 引入了传播属性的特征。</p><table><thead><tr><th>传播属性</th><th>外部不存在事务</th><th>外部存在事务</th><th>备注</th></tr></thead><tbody><tr><td>REQUIRED (默认值)</td><td>开启事务</td><td>融合到外部事务</td><td>主要用于增删改操作中</td></tr><tr><td>SUPPORTS</td><td>不开启新的事务</td><td>融合到外部事务</td><td>主要用于查询方法中</td></tr><tr><td>REQUIRED_NEW</td><td>开启新的事务</td><td>挂起外部事务, 开启新的事务</td><td>使用于日志等事务操作中</td></tr><tr><td>NOT_SUPPORTED</td><td>不开启新的事务</td><td>挂起外部事务</td><td>不常用</td></tr><tr><td>NEVER</td><td>不开启新的事务</td><td>抛出异常</td><td>不常用</td></tr><tr><td>MANDATORY</td><td>抛出异常</td><td>融合到外部事务中</td><td>不常用</td></tr></tbody></table><h6 id="只读属性" tabindex="-1"><a class="header-anchor" href="#只读属性" aria-hidden="true">#</a> 只读属性</h6><p>对于仅查询的服务, 通过添加只读属性, 提高执行效率。</p><h6 id="超时属性" tabindex="-1"><a class="header-anchor" href="#超时属性" aria-hidden="true">#</a> 超时属性</h6><p>为了避免事务对数据库的表进行行锁和表锁长时间锁定造成锁库锁表的问题。可以通过超时时间控制事务超时的最长时间, 默认为-1, 单位为秒。</p><h6 id="异常属性" tabindex="-1"><a class="header-anchor" href="#异常属性" aria-hidden="true">#</a> 异常属性</h6><p>定义触发事务回滚的异常, 默认是<code>RuntimeException</code>运行时异常及其子类进行事务回滚。</p><h2 id="_4-spring注解版" tabindex="-1"><a class="header-anchor" href="#_4-spring注解版" aria-hidden="true">#</a> 4 Spring注解版</h2><p>Spring4.x之后以及后面的SpringBoot推荐的开发方式都是使用注解进行开发，后续的Spring开发主流将会是注解，如果实在遇到需要修改注解的时候，可以使用xml配置的方式进行覆盖。</p><h3 id="_4-1-常用注解" tabindex="-1"><a class="header-anchor" href="#_4-1-常用注解" aria-hidden="true">#</a> 4.1 常用注解</h3><p><strong>组件相关</strong></p><ul><li>@ComponentScan: 设计基础扫描包，将该包及其子包进行注解扫描</li><li>@Component: 指定该类为一个组件</li><li>@Bean: 指定该方法的返回值为一个Bean</li><li>@Configuration: 指定当前类为一个配置类</li><li>@Controller: 指定该类为一个Controller组件，实际同@Component</li><li>@Service: 指定该类为一个Service组件，实际同@Component</li><li>@Repository: 指定该类为一个Repository组件，实际同@Component</li><li>@Scope: 指定类的scope属性, 默认单例singleton</li><li>@Lazy: 配置后延迟创建单实例对象</li><li>@Import: 引入另外一组Configuration中的生成的Bean</li><li>@ImportResource: 引入传统的XML中定义的Bean</li></ul><blockquote><p>组件覆盖优先级: @Component及其衍生注解 &lt; @Bean &lt; XML配置文件Bean</p></blockquote><p><strong>生命周期相关</strong></p><ul><li>@PostConstruct: 指定组件创建初始化的方法，来源于JSR标准规范注解</li><li>@PreDestory: 指定组件销毁前执行的方法，来源于JSR标准规范注解</li></ul><p><strong>注入相关</strong></p><ul><li>@Autowired: 基于对象类型，注入依赖组件</li><li>@Qualifier: 搭配@Autowired，实现基于对象ID，注入依赖组件</li><li>@Resource: 基于对象ID，注入依赖组件，如果名字没有指定，则按照类型注入依赖组件。来源于JSR标准规范注解</li><li>@Value: 使用\${}语法，为非静态属性进行注入</li><li>@PropertySource: 指定properties配置文件的路径</li></ul><h2 id="_5-spring整合篇" tabindex="-1"><a class="header-anchor" href="#_5-spring整合篇" aria-hidden="true">#</a> 5 Spring整合篇</h2><h3 id="_5-1-spring整合日志框架" tabindex="-1"><a class="header-anchor" href="#_5-1-spring整合日志框架" aria-hidden="true">#</a> 5.1 Spring整合日志框架</h3><h3 id="_5-2-spring整合mybatis" tabindex="-1"><a class="header-anchor" href="#_5-2-spring整合mybatis" aria-hidden="true">#</a> 5.2 Spring整合Mybatis</h3><h3 id="_5-3-spring整合hibernate" tabindex="-1"><a class="header-anchor" href="#_5-3-spring整合hibernate" aria-hidden="true">#</a> 5.3 Spring整合Hibernate</h3><h3 id="_5-4-spring整合多数据源" tabindex="-1"><a class="header-anchor" href="#_5-4-spring整合多数据源" aria-hidden="true">#</a> 5.4 Spring整合多数据源</h3>`,48);function k(v,m){const t=p("RouterLink");return o(),c("div",null,[r,n("blockquote",null,[n("p",null,[a("扩展："),i(t,{to:"/blogs/Spring/Spring/%E5%9F%BA%E4%BA%8EAspectJ%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0Spring%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html"},{default:l(()=>[a("基于AspectJ注解实现Spring动态代理。")]),_:1})])]),d])}const h=e(u,[["render",k],["__file","Springxuexijilu.html.vue"]]);export{h as default};
