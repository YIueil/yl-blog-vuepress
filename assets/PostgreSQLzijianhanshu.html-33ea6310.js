import{_ as n,o as s,c as a,d as p}from"./app-4023f1b2.js";const t={},e=p(`<h1 id="postgresql自建函数" tabindex="-1"><a class="header-anchor" href="#postgresql自建函数" aria-hidden="true">#</a> PostgreSQL自建函数</h1><h2 id="给某个表插入随机数据" tabindex="-1"><a class="header-anchor" href="#给某个表插入随机数据" aria-hidden="true">#</a> 给某个表插入随机数据</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 给某个表插入随机数据 调用示例: select insert_random_data(&#39;table_name1&#39;, 10);</span>
<span class="token keyword">create</span> <span class="token keyword">function</span> insert_random_data<span class="token punctuation">(</span>tablename <span class="token keyword">text</span><span class="token punctuation">,</span> <span class="token comment">-- 表名</span>
                                   n <span class="token keyword">integer</span>    <span class="token comment">-- 插入行数量</span>
<span class="token punctuation">)</span> <span class="token keyword">returns</span> void
    <span class="token keyword">language</span> plpgsql
<span class="token keyword">as</span>
$$
<span class="token keyword">DECLARE</span>
    i    <span class="token keyword">integer</span><span class="token punctuation">;</span>
    j    record<span class="token punctuation">;</span>
    cols <span class="token keyword">text</span><span class="token punctuation">;</span>
    vals <span class="token keyword">text</span><span class="token punctuation">;</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">FOR</span> i <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span>n
        <span class="token keyword">LOOP</span>
            cols :<span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
            vals :<span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">FOR</span> j <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">,</span> data_type<span class="token punctuation">,</span> character_maximum_length
                      <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span>
                      <span class="token keyword">WHERE</span> table_name <span class="token operator">=</span> tablename<span class="token punctuation">)</span>
                <span class="token keyword">LOOP</span>
                    <span class="token keyword">IF</span> cols <span class="token operator">!=</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">THEN</span>
                        cols :<span class="token operator">=</span> cols <span class="token operator">||</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">;</span>
                        vals :<span class="token operator">=</span> vals <span class="token operator">||</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">;</span>
                    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
                    cols :<span class="token operator">=</span> cols <span class="token operator">||</span> j<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span>
                    <span class="token comment">-- 处理整数类型</span>
                    <span class="token keyword">IF</span> j<span class="token punctuation">.</span>data_type <span class="token operator">=</span> <span class="token string">&#39;integer&#39;</span> <span class="token keyword">THEN</span>
                        vals :<span class="token operator">=</span> vals <span class="token operator">||</span> floor<span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">-- 处理小数类型</span>
                    ELSIF j<span class="token punctuation">.</span>data_type <span class="token operator">=</span> <span class="token string">&#39;numeric&#39;</span> <span class="token keyword">THEN</span>
                        vals :<span class="token operator">=</span> vals <span class="token operator">||</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
                        <span class="token comment">-- 处理字符串类型</span>
                    <span class="token keyword">ELSEIF</span> j<span class="token punctuation">.</span>data_type <span class="token operator">=</span> <span class="token string">&#39;character varying&#39;</span> <span class="token operator">OR</span> j<span class="token punctuation">.</span>data_type <span class="token operator">=</span> <span class="token string">&#39;text&#39;</span> <span class="token keyword">THEN</span>
                        <span class="token keyword">IF</span> j<span class="token punctuation">.</span>character_maximum_length <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">AND</span> j<span class="token punctuation">.</span>character_maximum_length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">THEN</span>
                            vals :<span class="token operator">=</span> vals <span class="token operator">||</span> quote_literal<span class="token punctuation">(</span>substr<span class="token punctuation">(</span>md5<span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>::<span class="token keyword">text</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">.</span>character_maximum_length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">ELSE</span>
                            vals :<span class="token operator">=</span> vals <span class="token operator">||</span> quote_literal<span class="token punctuation">(</span>md5<span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>::<span class="token keyword">text</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
                        <span class="token comment">-- 处理时间类型</span>
                    ELSIF j<span class="token punctuation">.</span>data_type <span class="token operator">=</span> <span class="token string">&#39;timestamp without time zone&#39;</span> <span class="token keyword">THEN</span>
                        vals :<span class="token operator">=</span> vals <span class="token operator">||</span>
                                quote_literal<span class="token punctuation">(</span>to_char<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">interval</span> <span class="token string">&#39;1 year&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;YYYY-MM-DD HH24:MI:SS&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    ELSIF j<span class="token punctuation">.</span>data_type <span class="token operator">=</span> <span class="token string">&#39;date&#39;</span> <span class="token keyword">THEN</span>
                        vals :<span class="token operator">=</span> vals <span class="token operator">||</span> quote_literal<span class="token punctuation">(</span>to_char<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">interval</span> <span class="token string">&#39;1 year&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;YYYY-MM-DD&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">ELSE</span>
                        vals :<span class="token operator">=</span> vals <span class="token operator">||</span> quote_literal<span class="token punctuation">(</span>md5<span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>::<span class="token keyword">text</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
                <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span>
            <span class="token keyword">EXECUTE</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO %I (%s) VALUES (%s)&#39;</span><span class="token punctuation">,</span> tablename<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> vals<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span>
$$<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除某个表的无用数据" tabindex="-1"><a class="header-anchor" href="#删除某个表的无用数据" aria-hidden="true">#</a> 删除某个表的无用数据</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 删除某个表的无用数据 调用示例: select delete_invalid_data(&#39;test_table&#39;, Array[&#39;id&#39;, &#39;name&#39;])</span>
<span class="token keyword">create</span> <span class="token keyword">function</span> delete_invalid_data<span class="token punctuation">(</span>tablename <span class="token keyword">text</span><span class="token punctuation">,</span> <span class="token comment">-- 表名</span>
                                    colnames <span class="token keyword">text</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">-- 字段集合名称</span>
<span class="token punctuation">)</span> <span class="token keyword">returns</span> void
    <span class="token keyword">language</span> plpgsql
<span class="token keyword">as</span>
$$
<span class="token keyword">DECLARE</span>
    i    <span class="token keyword">integer</span><span class="token punctuation">;</span>
    j    record<span class="token punctuation">;</span>
    cols <span class="token keyword">text</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">sql</span>  <span class="token keyword">text</span><span class="token punctuation">;</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">FOR</span> j <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> column_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">WHERE</span> table_name <span class="token operator">=</span> tablename<span class="token punctuation">)</span>
        <span class="token keyword">LOOP</span>
            <span class="token keyword">IF</span> <span class="token operator">NOT</span> j<span class="token punctuation">.</span>column_name <span class="token operator">=</span> <span class="token keyword">ANY</span> <span class="token punctuation">(</span>colnames<span class="token punctuation">)</span> <span class="token keyword">THEN</span>
                cols :<span class="token operator">=</span> array_append<span class="token punctuation">(</span>cols<span class="token punctuation">,</span> j<span class="token punctuation">.</span>column_name::<span class="token keyword">text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
        <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span>
    <span class="token keyword">sql</span> :<span class="token operator">=</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;DELETE FROM %I WHERE (%s) IS NULL&#39;</span><span class="token punctuation">,</span> tablename<span class="token punctuation">,</span> array_to_string<span class="token punctuation">(</span>cols<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    RAISE NOTICE <span class="token string">&#39;SQL statement: %&#39;</span><span class="token punctuation">,</span> <span class="token keyword">sql</span><span class="token punctuation">;</span>
    <span class="token keyword">EXECUTE</span> <span class="token keyword">sql</span><span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span>
$$<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","PostgreSQLzijianhanshu.html.vue"]]);export{k as default};
