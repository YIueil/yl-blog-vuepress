import{_ as n,o as a,c as s,d as t}from"./app-4023f1b2.js";const e={},o=t(`<h1 id="正则表达式学习记录" tabindex="-1"><a class="header-anchor" href="#正则表达式学习记录" aria-hidden="true">#</a> 正则表达式学习记录</h1><h2 id="_1-基础使用" tabindex="-1"><a class="header-anchor" href="#_1-基础使用" aria-hidden="true">#</a> 1 基础使用</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>  
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
	<span class="token comment">// 匹配20开头的4位数字</span>
    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;20\\\\d\\\\d&quot;</span><span class="token punctuation">;</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2019&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  </span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2100&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false  </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-匹配规则" tabindex="-1"><a class="header-anchor" href="#_2-匹配规则" aria-hidden="true">#</a> 2 匹配规则</h2><table><thead><tr><th>正则表达式</th><th>规则</th><th>可以匹配</th></tr></thead><tbody><tr><td><code>A</code></td><td>指定字符</td><td><code>A</code></td></tr><tr><td><code>\\u548c</code></td><td>指定Unicode字符</td><td><code>和</code></td></tr><tr><td><code>.</code></td><td>任意字符</td><td><code>a</code>，<code>b</code>，<code>&amp;</code>，<code>0</code></td></tr><tr><td><code>\\d</code></td><td>数字0~9</td><td><code>0</code>~<code>9</code></td></tr><tr><td><code>\\w</code></td><td>大小写字母，数字和下划线</td><td><code>a</code>~<code>z</code>，<code>A</code>~<code>Z</code>，<code>0</code>~<code>9</code>，<code>_</code></td></tr><tr><td><code>\\s</code></td><td>空格、Tab键</td><td>空格，Tab</td></tr><tr><td><code>\\D</code></td><td>非数字</td><td><code>a</code>，<code>A</code>，<code>&amp;</code>，<code>_</code>，……</td></tr><tr><td><code>\\W</code></td><td>非\\w</td><td><code>&amp;</code>，<code>@</code>，<code>中</code>，……</td></tr><tr><td><code>\\S</code></td><td>非\\s</td><td><code>a</code>，<code>A</code>，<code>&amp;</code>，<code>_</code>，……</td></tr></tbody></table><h3 id="_2-1-匹配任意字符" tabindex="-1"><a class="header-anchor" href="#_2-1-匹配任意字符" aria-hidden="true">#</a> 2.1 匹配任意字符</h3><blockquote><p><code>.</code>匹配所有的字符</p></blockquote><h3 id="_2-2-匹配常用字符" tabindex="-1"><a class="header-anchor" href="#_2-2-匹配常用字符" aria-hidden="true">#</a> 2.2 匹配常用字符</h3><blockquote><p><code>\\w</code>匹配常用字符：字母、数字或下划线。<code>\\W</code>则匹配非常用字符。</p></blockquote><h3 id="_2-3-匹配数字" tabindex="-1"><a class="header-anchor" href="#_2-3-匹配数字" aria-hidden="true">#</a> 2.3 匹配数字</h3><blockquote><p><code>\\d</code>匹配数字。<code>\\D</code>则匹配非数字。</p></blockquote><h3 id="_2-4-匹配空格" tabindex="-1"><a class="header-anchor" href="#_2-4-匹配空格" aria-hidden="true">#</a> 2.4 匹配空格</h3><blockquote><p><code>\\s</code>匹配空格。<code>\\S</code>则匹配非空格。</p></blockquote><h3 id="_2-5-重复匹配" tabindex="-1"><a class="header-anchor" href="#_2-5-重复匹配" aria-hidden="true">#</a> 2.5 重复匹配</h3><table><thead><tr><th>正则表达式</th><th>规则</th><th>可以匹配</th></tr></thead><tbody><tr><td><code>A*</code></td><td>任意个数字符</td><td>空，<code>A</code>，<code>AA</code>，<code>AAA</code>，……</td></tr><tr><td><code>A+</code></td><td>至少1个字符</td><td><code>A</code>，<code>AA</code>，<code>AAA</code>，……</td></tr><tr><td><code>A?</code></td><td>0个或1个字符</td><td>空，<code>A</code></td></tr><tr><td><code>A{3}</code></td><td>指定个数字符</td><td><code>AAA</code></td></tr><tr><td><code>A{2,3}</code></td><td>指定范围个数字符</td><td><code>AA</code>，<code>AAA</code></td></tr><tr><td><code>A{2,}</code></td><td>至少n个字符</td><td><code>AA</code>，<code>AAA</code>，<code>AAAA</code>，……</td></tr><tr><td><code>A{0,3}</code></td><td>最多n个字符</td><td>空，<code>A</code>，<code>AA</code>，<code>AAA</code></td></tr></tbody></table><h2 id="_3-复杂匹配" tabindex="-1"><a class="header-anchor" href="#_3-复杂匹配" aria-hidden="true">#</a> 3 复杂匹配</h2><h3 id="_3-1-匹配开头结尾" tabindex="-1"><a class="header-anchor" href="#_3-1-匹配开头结尾" aria-hidden="true">#</a> 3.1 匹配开头结尾</h3><blockquote><p>使用<code>^</code>指定开头字符, 使用$指定结尾字符。</p></blockquote><h3 id="_3-2-指定匹配范围" tabindex="-1"><a class="header-anchor" href="#_3-2-指定匹配范围" aria-hidden="true">#</a> 3.2 指定匹配范围</h3><table><thead><tr><th>正则表达式</th><th>规则</th><th>可以匹配</th></tr></thead><tbody><tr><td>[0-9]</td><td>匹配0-9的数字</td><td><code>1</code>、<code>2</code>、<code>3</code>、<code>4</code>、......</td></tr><tr><td>[a-z]</td><td>匹配所有的小写字母</td><td><code>a</code>、<code>b</code>、<code>z</code>、......</td></tr><tr><td>[A-Z]</td><td>匹配所有的大写字母</td><td><code>A</code>、<code>B</code>、<code>Z</code>、......</td></tr><tr><td>[0-9a-zA-Z_]</td><td>匹配常用字符，等价于\\w</td><td></td></tr></tbody></table><h3 id="_3-3-反向匹配范围" tabindex="-1"><a class="header-anchor" href="#_3-3-反向匹配范围" aria-hidden="true">#</a> 3.3 反向匹配范围</h3><blockquote><p>使用<code>^</code>来指定某个字符进行反向的匹配。</p></blockquote><h3 id="_3-4-规则匹配" tabindex="-1"><a class="header-anchor" href="#_3-4-规则匹配" aria-hidden="true">#</a> 3.4 规则匹配</h3><blockquote><p><code>或</code>, 通过<code>|</code>来进行或规则匹配，实现规则匹配。如匹配<code>java|php|golang</code>即可匹配<code>java</code>、<code>php</code>、<code>golang</code>三个字符。</p></blockquote><blockquote><p>使用<code>括号</code>，可以实现的公共部分提取。如<code>learn\\s(java|php|go)</code>实现匹配<code>learn java</code>、<code>learn php</code>和<code>learn go</code>.</p></blockquote><h2 id="_4-分组匹配" tabindex="-1"><a class="header-anchor" href="#_4-分组匹配" aria-hidden="true">#</a> 4 分组匹配</h2><p>使用<code>(...)</code>除了添加规则匹配外，还有个重要的功能是分组匹配。</p><blockquote><p>示例: 如何匹配这个日期<code>2024-11-13</code>，并且提取出其中的年月日信息。</p></blockquote><p>Java实现:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LocalDateTime</span> nowDate <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">String</span> nowDateString <span class="token operator">=</span> nowDate<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;(\\\\d{4})-(\\\\d{2})-(\\\\d{2})&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>nowDateString<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token class-name">String</span> matchStr <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">String</span> year <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">String</span> mouth <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">String</span> day <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;matchStr = &quot;</span> <span class="token operator">+</span> matchStr<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;year: &quot;</span> <span class="token operator">+</span> year <span class="token operator">+</span> <span class="token string">&quot;, mouth: &quot;</span> <span class="token operator">+</span> mouth <span class="token operator">+</span> <span class="token string">&quot;, day: &quot;</span> <span class="token operator">+</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>matchStr <span class="token operator">=</span> <span class="token number">2024</span>-12-31
year: <span class="token number">2024</span>, mouth: <span class="token number">12</span>, day: <span class="token number">31</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>正则表达式用<code>(...)</code>分组可以通过<code>Matcher</code>对象快速提取子串：</p></blockquote><ul><li><code>group(0)</code>表示匹配的整个字符串；</li><li><code>group(1)</code>表示第1个子串，<code>group(2)</code>表示第2个子串，以此类推。</li></ul><h2 id="_5-非贪婪匹配" tabindex="-1"><a class="header-anchor" href="#_5-非贪婪匹配" aria-hidden="true">#</a> 5 非贪婪匹配</h2><blockquote><p>默认情况下，正则匹配将执行贪婪匹配。对于<code>\\d+</code>会尽可能的匹配数字。通过表达式末尾加<code>?</code>表示非贪婪匹配。</p></blockquote><table><thead><tr><th>正则表达式</th><th>规则</th><th>匹配字符</th><th>匹配到</th></tr></thead><tbody><tr><td><code>\\d+</code></td><td>贪婪匹配数字1个以上</td><td>123456</td><td>1</td></tr><tr><td><code>\\d+?</code></td><td>非贪婪匹配数字1个以上</td><td>123456</td><td>123456</td></tr></tbody></table><blockquote><p>实例：查询一排数字末尾的0的数量。</p></blockquote><p>Java代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>  
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;1234560000&quot;</span><span class="token punctuation">;</span>  
    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;(\\\\d+?)(0*)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">String</span> num <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">String</span> last <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;num: {}, last: {}&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>num: <span class="token number">123456</span>, last: 0000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-搜索和替换" tabindex="-1"><a class="header-anchor" href="#_6-搜索和替换" aria-hidden="true">#</a> 6 搜索和替换</h2><h3 id="_6-1-搜索功能" tabindex="-1"><a class="header-anchor" href="#_6-1-搜索功能" aria-hidden="true">#</a> 6.1 搜索功能</h3><blockquote><p>示例：找出一个字符串中的所有的数字</p></blockquote><p>Java代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;123bbs88x,sdk?asdkvnm,xlasd992kk29d9lzcoqd9qwk2msad92ka92jd02d2&quot;</span><span class="token punctuation">;</span>  
    <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">String</span> substring <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> matcher<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;substring: {}&quot;</span><span class="token punctuation">,</span> substring<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>LOGBACK<span class="token operator">|</span> <span class="token number">2024</span>-12-31 <span class="token number">17</span>:48:50.861 <span class="token operator">|</span> main <span class="token operator">|</span> DEBUG <span class="token operator">|</span> cc.yiueil.CommonTest - substring: <span class="token number">123</span>
LOGBACK<span class="token operator">|</span> <span class="token number">2024</span>-12-31 <span class="token number">17</span>:48:50.863 <span class="token operator">|</span> main <span class="token operator">|</span> DEBUG <span class="token operator">|</span> cc.yiueil.CommonTest - substring: <span class="token number">88</span>
LOGBACK<span class="token operator">|</span> <span class="token number">2024</span>-12-31 <span class="token number">17</span>:48:50.863 <span class="token operator">|</span> main <span class="token operator">|</span> DEBUG <span class="token operator">|</span> cc.yiueil.CommonTest - substring: <span class="token number">992</span>
LOGBACK<span class="token operator">|</span> <span class="token number">2024</span>-12-31 <span class="token number">17</span>:48:50.863 <span class="token operator">|</span> main <span class="token operator">|</span> DEBUG <span class="token operator">|</span> cc.yiueil.CommonTest - substring: <span class="token number">29</span>
LOGBACK<span class="token operator">|</span> <span class="token number">2024</span>-12-31 <span class="token number">17</span>:48:50.863 <span class="token operator">|</span> main <span class="token operator">|</span> DEBUG <span class="token operator">|</span> cc.yiueil.CommonTest - substring: <span class="token number">9</span>
LOGBACK<span class="token operator">|</span> <span class="token number">2024</span>-12-31 <span class="token number">17</span>:48:50.863 <span class="token operator">|</span> main <span class="token operator">|</span> DEBUG <span class="token operator">|</span> cc.yiueil.CommonTest - substring: <span class="token number">9</span>
LOGBACK<span class="token operator">|</span> <span class="token number">2024</span>-12-31 <span class="token number">17</span>:48:50.863 <span class="token operator">|</span> main <span class="token operator">|</span> DEBUG <span class="token operator">|</span> cc.yiueil.CommonTest - substring: <span class="token number">2</span>
LOGBACK<span class="token operator">|</span> <span class="token number">2024</span>-12-31 <span class="token number">17</span>:48:50.863 <span class="token operator">|</span> main <span class="token operator">|</span> DEBUG <span class="token operator">|</span> cc.yiueil.CommonTest - substring: <span class="token number">92</span>
LOGBACK<span class="token operator">|</span> <span class="token number">2024</span>-12-31 <span class="token number">17</span>:48:50.863 <span class="token operator">|</span> main <span class="token operator">|</span> DEBUG <span class="token operator">|</span> cc.yiueil.CommonTest - substring: <span class="token number">92</span>
LOGBACK<span class="token operator">|</span> <span class="token number">2024</span>-12-31 <span class="token number">17</span>:48:50.863 <span class="token operator">|</span> main <span class="token operator">|</span> DEBUG <span class="token operator">|</span> cc.yiueil.CommonTest - substring: 02
LOGBACK<span class="token operator">|</span> <span class="token number">2024</span>-12-31 <span class="token number">17</span>:48:50.863 <span class="token operator">|</span> main <span class="token operator">|</span> DEBUG <span class="token operator">|</span> cc.yiueil.CommonTest - substring: <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-搜索并替换" tabindex="-1"><a class="header-anchor" href="#_6-2-搜索并替换" aria-hidden="true">#</a> 6.2 搜索并替换</h3><blockquote><p>示例，将一段文本格式化。多个空格之间只保留一个空格。</p></blockquote><p>Java代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>  
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;hello  \\tworld \\t, hello    java!&quot;</span><span class="token punctuation">;</span>  
    <span class="token class-name">String</span> s1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\s+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;s1: {}&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>LOGBACK<span class="token operator">|</span> <span class="token number">2024</span>-12-31 <span class="token number">17</span>:58:12.222 <span class="token operator">|</span> main <span class="token operator">|</span> DEBUG <span class="token operator">|</span> cc.yiueil.CommonTest - s1: hello world , hello java<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-3-反向引用" tabindex="-1"><a class="header-anchor" href="#_6-3-反向引用" aria-hidden="true">#</a> 6.3 反向引用</h3>`,56),p=[o];function c(l,d){return a(),s("div",null,p)}const i=n(e,[["render",c],["__file","zhengzebiaodashixuexijilu.html.vue"]]);export{i as default};
